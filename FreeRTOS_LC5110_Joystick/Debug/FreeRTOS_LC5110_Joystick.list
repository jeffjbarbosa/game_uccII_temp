
FreeRTOS_LC5110_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000297c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08002a8c  08002a8c  00012a8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001030  2000000c  08002edc  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000103c  08002edc  0002103c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cf7f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004099  00000000  00000000  0003cfb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000094ff  00000000  00000000  0004104d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000db0  00000000  00000000  0004a550  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001148  00000000  00000000  0004b300  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001a5e6  00000000  00000000  0004c448  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ed5e  00000000  00000000  00066a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007eed7  00000000  00000000  0007578c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000f4663  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000026c0  00000000  00000000  000f46e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002a74 	.word	0x08002a74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002a74 	.word	0x08002a74

08000150 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a07      	ldr	r2, [pc, #28]	; (8000170 <HAL_Init+0x20>)
{
 8000152:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000156:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015e:	f000 fb2d 	bl	80007bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f002 fbc0 	bl	80028e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fb2e 	bl	80027c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd08      	pop	{r3, pc}
 8000170:	40022000 	.word	0x40022000

08000174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000174:	4a03      	ldr	r2, [pc, #12]	; (8000184 <HAL_IncTick+0x10>)
 8000176:	4b04      	ldr	r3, [pc, #16]	; (8000188 <HAL_IncTick+0x14>)
 8000178:	6811      	ldr	r1, [r2, #0]
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	440b      	add	r3, r1
 800017e:	6013      	str	r3, [r2, #0]
}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000ff8 	.word	0x20000ff8
 8000188:	20000000 	.word	0x20000000

0800018c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800018c:	4b01      	ldr	r3, [pc, #4]	; (8000194 <HAL_GetTick+0x8>)
 800018e:	6818      	ldr	r0, [r3, #0]
}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000ff8 	.word	0x20000ff8

08000198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000198:	b538      	push	{r3, r4, r5, lr}
 800019a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800019c:	f7ff fff6 	bl	800018c <HAL_GetTick>
 80001a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001a2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001a4:	bf1e      	ittt	ne
 80001a6:	4b04      	ldrne	r3, [pc, #16]	; (80001b8 <HAL_Delay+0x20>)
 80001a8:	781b      	ldrbne	r3, [r3, #0]
 80001aa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001ac:	f7ff ffee 	bl	800018c <HAL_GetTick>
 80001b0:	1b40      	subs	r0, r0, r5
 80001b2:	42a0      	cmp	r0, r4
 80001b4:	d3fa      	bcc.n	80001ac <HAL_Delay+0x14>
  {
  }
}
 80001b6:	bd38      	pop	{r3, r4, r5, pc}
 80001b8:	20000000 	.word	0x20000000

080001bc <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80001bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80001be:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80001c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001c2:	f012 0f50 	tst.w	r2, #80	; 0x50
 80001c6:	d11b      	bne.n	8000200 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80001c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001ce:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	6892      	ldr	r2, [r2, #8]
 80001d4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80001d8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80001dc:	d10c      	bne.n	80001f8 <ADC_DMAConvCplt+0x3c>
 80001de:	68da      	ldr	r2, [r3, #12]
 80001e0:	b952      	cbnz	r2, 80001f8 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80001e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80001e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80001ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001ec:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80001ee:	bf5e      	ittt	pl
 80001f0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80001f2:	f042 0201 	orrpl.w	r2, r2, #1
 80001f6:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 fefb 	bl	8001ff4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80001fe:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000200:	6a1b      	ldr	r3, [r3, #32]
}
 8000202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000208:	4718      	bx	r3

0800020a <HAL_ADC_ConvHalfCpltCallback>:
 800020a:	4770      	bx	lr

0800020c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800020c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800020e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000210:	f7ff fffb 	bl	800020a <HAL_ADC_ConvHalfCpltCallback>
}
 8000214:	bd08      	pop	{r3, pc}

08000216 <HAL_ADC_LevelOutOfWindowCallback>:
 8000216:	4770      	bx	lr

08000218 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000218:	6803      	ldr	r3, [r0, #0]
{
 800021a:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800021c:	685a      	ldr	r2, [r3, #4]
{
 800021e:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000220:	0690      	lsls	r0, r2, #26
 8000222:	d527      	bpl.n	8000274 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	0791      	lsls	r1, r2, #30
 8000228:	d524      	bpl.n	8000274 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800022a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800022c:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800022e:	bf5e      	ittt	pl
 8000230:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000232:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000236:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000238:	689a      	ldr	r2, [r3, #8]
 800023a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800023e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000242:	d110      	bne.n	8000266 <HAL_ADC_IRQHandler+0x4e>
 8000244:	68e2      	ldr	r2, [r4, #12]
 8000246:	b972      	cbnz	r2, 8000266 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	f022 0220 	bic.w	r2, r2, #32
 800024e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000250:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000256:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000258:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800025a:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800025c:	bf5e      	ittt	pl
 800025e:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000260:	f043 0301 	orrpl.w	r3, r3, #1
 8000264:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8000266:	4620      	mov	r0, r4
 8000268:	f001 fec4 	bl	8001ff4 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800026c:	f06f 0212 	mvn.w	r2, #18
 8000270:	6823      	ldr	r3, [r4, #0]
 8000272:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000274:	6823      	ldr	r3, [r4, #0]
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	0610      	lsls	r0, r2, #24
 800027a:	d530      	bpl.n	80002de <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	0751      	lsls	r1, r2, #29
 8000280:	d52d      	bpl.n	80002de <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000282:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000284:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000286:	bf5e      	ittt	pl
 8000288:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800028a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800028e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000290:	689a      	ldr	r2, [r3, #8]
 8000292:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000296:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 800029a:	d00a      	beq.n	80002b2 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800029c:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800029e:	0550      	lsls	r0, r2, #21
 80002a0:	d416      	bmi.n	80002d0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002a2:	689a      	ldr	r2, [r3, #8]
 80002a4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002a8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80002ac:	d110      	bne.n	80002d0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002ae:	68e2      	ldr	r2, [r4, #12]
 80002b0:	b972      	cbnz	r2, 80002d0 <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80002b2:	685a      	ldr	r2, [r3, #4]
 80002b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80002b8:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80002ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002c0:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80002c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002c4:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80002c6:	bf5e      	ittt	pl
 80002c8:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80002ca:	f043 0301 	orrpl.w	r3, r3, #1
 80002ce:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80002d0:	4620      	mov	r0, r4
 80002d2:	f000 fa71 	bl	80007b8 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80002d6:	f06f 020c 	mvn.w	r2, #12
 80002da:	6823      	ldr	r3, [r4, #0]
 80002dc:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80002de:	6823      	ldr	r3, [r4, #0]
 80002e0:	685a      	ldr	r2, [r3, #4]
 80002e2:	0652      	lsls	r2, r2, #25
 80002e4:	d50d      	bpl.n	8000302 <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	07db      	lsls	r3, r3, #31
 80002ea:	d50a      	bpl.n	8000302 <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80002ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80002ee:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80002f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002f4:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80002f6:	f7ff ff8e 	bl	8000216 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80002fa:	f06f 0201 	mvn.w	r2, #1
 80002fe:	6823      	ldr	r3, [r4, #0]
 8000300:	601a      	str	r2, [r3, #0]
}
 8000302:	bd10      	pop	{r4, pc}

08000304 <HAL_ADC_ErrorCallback>:
 8000304:	4770      	bx	lr

08000306 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000306:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000308:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800030a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800030c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000310:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000312:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800031a:	f7ff fff3 	bl	8000304 <HAL_ADC_ErrorCallback>
}
 800031e:	bd08      	pop	{r3, pc}

08000320 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000320:	2300      	movs	r3, #0
{ 
 8000322:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000324:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000326:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800032a:	2b01      	cmp	r3, #1
 800032c:	d06d      	beq.n	800040a <HAL_ADC_ConfigChannel+0xea>
 800032e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000330:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000332:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000336:	2d06      	cmp	r5, #6
 8000338:	6802      	ldr	r2, [r0, #0]
 800033a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800033e:	680c      	ldr	r4, [r1, #0]
 8000340:	d823      	bhi.n	800038a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000342:	261f      	movs	r6, #31
 8000344:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8000346:	3b05      	subs	r3, #5
 8000348:	409e      	lsls	r6, r3
 800034a:	ea25 0506 	bic.w	r5, r5, r6
 800034e:	fa04 f303 	lsl.w	r3, r4, r3
 8000352:	432b      	orrs	r3, r5
 8000354:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000356:	2c09      	cmp	r4, #9
 8000358:	688b      	ldr	r3, [r1, #8]
 800035a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800035e:	f04f 0107 	mov.w	r1, #7
 8000362:	d92a      	bls.n	80003ba <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000364:	68d6      	ldr	r6, [r2, #12]
 8000366:	3d1e      	subs	r5, #30
 8000368:	40a9      	lsls	r1, r5
 800036a:	ea26 0101 	bic.w	r1, r6, r1
 800036e:	40ab      	lsls	r3, r5
 8000370:	430b      	orrs	r3, r1
 8000372:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000374:	f1a4 0310 	sub.w	r3, r4, #16
 8000378:	2b01      	cmp	r3, #1
 800037a:	d926      	bls.n	80003ca <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800037c:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800037e:	2200      	movs	r2, #0
 8000380:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8000384:	4618      	mov	r0, r3
 8000386:	b002      	add	sp, #8
 8000388:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800038a:	2d0c      	cmp	r5, #12
 800038c:	f04f 051f 	mov.w	r5, #31
 8000390:	d809      	bhi.n	80003a6 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000392:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000394:	3b23      	subs	r3, #35	; 0x23
 8000396:	409d      	lsls	r5, r3
 8000398:	ea26 0505 	bic.w	r5, r6, r5
 800039c:	fa04 f303 	lsl.w	r3, r4, r3
 80003a0:	432b      	orrs	r3, r5
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
 80003a4:	e7d7      	b.n	8000356 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003a6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003a8:	3b41      	subs	r3, #65	; 0x41
 80003aa:	409d      	lsls	r5, r3
 80003ac:	ea26 0505 	bic.w	r5, r6, r5
 80003b0:	fa04 f303 	lsl.w	r3, r4, r3
 80003b4:	432b      	orrs	r3, r5
 80003b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003b8:	e7cd      	b.n	8000356 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80003ba:	6916      	ldr	r6, [r2, #16]
 80003bc:	40a9      	lsls	r1, r5
 80003be:	ea26 0101 	bic.w	r1, r6, r1
 80003c2:	40ab      	lsls	r3, r5
 80003c4:	430b      	orrs	r3, r1
 80003c6:	6113      	str	r3, [r2, #16]
 80003c8:	e7d4      	b.n	8000374 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <HAL_ADC_ConfigChannel+0xf0>)
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d116      	bne.n	80003fe <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80003d0:	6893      	ldr	r3, [r2, #8]
 80003d2:	021b      	lsls	r3, r3, #8
 80003d4:	d4d2      	bmi.n	800037c <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003d6:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003d8:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003de:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003e0:	d1cc      	bne.n	800037c <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_ADC_ConfigChannel+0xf4>)
 80003e4:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <HAL_ADC_ConfigChannel+0xf8>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80003ec:	230a      	movs	r3, #10
 80003ee:	4353      	muls	r3, r2
            wait_loop_index--;
 80003f0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80003f2:	9b01      	ldr	r3, [sp, #4]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d0c1      	beq.n	800037c <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 80003f8:	9b01      	ldr	r3, [sp, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	e7f8      	b.n	80003f0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000400:	f043 0320 	orr.w	r3, r3, #32
 8000404:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000406:	2301      	movs	r3, #1
 8000408:	e7b9      	b.n	800037e <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 800040a:	2302      	movs	r3, #2
 800040c:	e7ba      	b.n	8000384 <HAL_ADC_ConfigChannel+0x64>
 800040e:	bf00      	nop
 8000410:	40012400 	.word	0x40012400
 8000414:	20000008 	.word	0x20000008
 8000418:	000f4240 	.word	0x000f4240

0800041c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800041c:	2300      	movs	r3, #0
{
 800041e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000420:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000422:	6803      	ldr	r3, [r0, #0]
{
 8000424:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000426:	689a      	ldr	r2, [r3, #8]
 8000428:	07d2      	lsls	r2, r2, #31
 800042a:	d502      	bpl.n	8000432 <ADC_Enable+0x16>
  return HAL_OK;
 800042c:	2000      	movs	r0, #0
}
 800042e:	b002      	add	sp, #8
 8000430:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000432:	689a      	ldr	r2, [r3, #8]
 8000434:	f042 0201 	orr.w	r2, r2, #1
 8000438:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <ADC_Enable+0x68>)
 800043c:	4a12      	ldr	r2, [pc, #72]	; (8000488 <ADC_Enable+0x6c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000444:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000446:	9b01      	ldr	r3, [sp, #4]
 8000448:	b9c3      	cbnz	r3, 800047c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800044a:	f7ff fe9f 	bl	800018c <HAL_GetTick>
 800044e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000450:	6823      	ldr	r3, [r4, #0]
 8000452:	689d      	ldr	r5, [r3, #8]
 8000454:	f015 0501 	ands.w	r5, r5, #1
 8000458:	d1e8      	bne.n	800042c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800045a:	f7ff fe97 	bl	800018c <HAL_GetTick>
 800045e:	1b80      	subs	r0, r0, r6
 8000460:	2802      	cmp	r0, #2
 8000462:	d9f5      	bls.n	8000450 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000464:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000466:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800046a:	f043 0310 	orr.w	r3, r3, #16
 800046e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000470:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000472:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	62e3      	str	r3, [r4, #44]	; 0x2c
 800047a:	e7d8      	b.n	800042e <ADC_Enable+0x12>
      wait_loop_index--;
 800047c:	9b01      	ldr	r3, [sp, #4]
 800047e:	3b01      	subs	r3, #1
 8000480:	e7e0      	b.n	8000444 <ADC_Enable+0x28>
 8000482:	bf00      	nop
 8000484:	20000008 	.word	0x20000008
 8000488:	000f4240 	.word	0x000f4240

0800048c <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 800048c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000490:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000492:	2b01      	cmp	r3, #1
{
 8000494:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000496:	d058      	beq.n	800054a <HAL_ADC_Start_IT+0xbe>
 8000498:	2301      	movs	r3, #1
 800049a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800049e:	f7ff ffbd 	bl	800041c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d14d      	bne.n	8000542 <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 80004a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004a8:	4a29      	ldr	r2, [pc, #164]	; (8000550 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 80004aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80004ae:	f023 0301 	bic.w	r3, r3, #1
 80004b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004b8:	6823      	ldr	r3, [r4, #0]
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d104      	bne.n	80004c8 <HAL_ADC_Start_IT+0x3c>
 80004be:	4925      	ldr	r1, [pc, #148]	; (8000554 <HAL_ADC_Start_IT+0xc8>)
 80004c0:	684a      	ldr	r2, [r1, #4]
 80004c2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80004c6:	d132      	bne.n	800052e <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80004ce:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004d0:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004d2:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004d4:	bf41      	itttt	mi
 80004d6:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80004d8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80004dc:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80004e0:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004e8:	bf1c      	itt	ne
 80004ea:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80004ec:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80004f0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004f8:	f06f 0202 	mvn.w	r2, #2
 80004fc:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80004fe:	685a      	ldr	r2, [r3, #4]
 8000500:	f042 0220 	orr.w	r2, r2, #32
 8000504:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800050c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000510:	d113      	bne.n	800053a <HAL_ADC_Start_IT+0xae>
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <HAL_ADC_Start_IT+0xc4>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d105      	bne.n	8000524 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000518:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800051c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800051e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000522:	d10a      	bne.n	800053a <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000524:	689a      	ldr	r2, [r3, #8]
 8000526:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800052a:	609a      	str	r2, [r3, #8]
}
 800052c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800052e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000530:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000534:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000536:	684a      	ldr	r2, [r1, #4]
 8000538:	e7cb      	b.n	80004d2 <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000540:	e7f3      	b.n	800052a <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8000542:	2300      	movs	r3, #0
 8000544:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000548:	e7f0      	b.n	800052c <HAL_ADC_Start_IT+0xa0>
  __HAL_LOCK(hadc);
 800054a:	2002      	movs	r0, #2
 800054c:	e7ee      	b.n	800052c <HAL_ADC_Start_IT+0xa0>
 800054e:	bf00      	nop
 8000550:	40012800 	.word	0x40012800
 8000554:	40012400 	.word	0x40012400

08000558 <HAL_ADC_Start_DMA>:
{
 8000558:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 800055c:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800055e:	4b40      	ldr	r3, [pc, #256]	; (8000660 <HAL_ADC_Start_DMA+0x108>)
 8000560:	6802      	ldr	r2, [r0, #0]
{
 8000562:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000564:	429a      	cmp	r2, r3
{
 8000566:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000568:	d002      	beq.n	8000570 <HAL_ADC_Start_DMA+0x18>
 800056a:	493e      	ldr	r1, [pc, #248]	; (8000664 <HAL_ADC_Start_DMA+0x10c>)
 800056c:	428a      	cmp	r2, r1
 800056e:	d103      	bne.n	8000578 <HAL_ADC_Start_DMA+0x20>
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000576:	d16e      	bne.n	8000656 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000578:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800057c:	2b01      	cmp	r3, #1
 800057e:	d06c      	beq.n	800065a <HAL_ADC_Start_DMA+0x102>
 8000580:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000582:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000584:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000588:	f7ff ff48 	bl	800041c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800058c:	4606      	mov	r6, r0
 800058e:	2800      	cmp	r0, #0
 8000590:	d15d      	bne.n	800064e <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000592:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000594:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000596:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800059a:	4b32      	ldr	r3, [pc, #200]	; (8000664 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800059c:	f020 0001 	bic.w	r0, r0, #1
 80005a0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005a4:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80005a6:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005a8:	d104      	bne.n	80005b4 <HAL_ADC_Start_DMA+0x5c>
 80005aa:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <HAL_ADC_Start_DMA+0x108>)
 80005ac:	6853      	ldr	r3, [r2, #4]
 80005ae:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80005b2:	d13e      	bne.n	8000632 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005ba:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005bc:	684b      	ldr	r3, [r1, #4]
 80005be:	055a      	lsls	r2, r3, #21
 80005c0:	d505      	bpl.n	80005ce <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80005c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005cc:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005d0:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005d2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80005d6:	bf18      	it	ne
 80005d8:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80005da:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80005dc:	bf18      	it	ne
 80005de:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80005e2:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80005e4:	2300      	movs	r3, #0
 80005e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80005ec:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005ee:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <HAL_ADC_Start_DMA+0x114>)
 80005f2:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <HAL_ADC_Start_DMA+0x118>)
 80005f6:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80005f8:	f06f 0302 	mvn.w	r3, #2
 80005fc:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000600:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000608:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800060c:	4643      	mov	r3, r8
 800060e:	f000 f97d 	bl	800090c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000612:	6823      	ldr	r3, [r4, #0]
 8000614:	689a      	ldr	r2, [r3, #8]
 8000616:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800061a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	bf0c      	ite	eq
 8000622:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000626:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800062a:	609a      	str	r2, [r3, #8]
}
 800062c:	4630      	mov	r0, r6
 800062e:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000632:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800063a:	6853      	ldr	r3, [r2, #4]
 800063c:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800063e:	bf41      	itttt	mi
 8000640:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8000642:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000646:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800064a:	62a0      	strmi	r0, [r4, #40]	; 0x28
 800064c:	e7bf      	b.n	80005ce <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800064e:	2300      	movs	r3, #0
 8000650:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000654:	e7ea      	b.n	800062c <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8000656:	2601      	movs	r6, #1
 8000658:	e7e8      	b.n	800062c <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 800065a:	2602      	movs	r6, #2
 800065c:	e7e6      	b.n	800062c <HAL_ADC_Start_DMA+0xd4>
 800065e:	bf00      	nop
 8000660:	40012400 	.word	0x40012400
 8000664:	40012800 	.word	0x40012800
 8000668:	080001bd 	.word	0x080001bd
 800066c:	0800020d 	.word	0x0800020d
 8000670:	08000307 	.word	0x08000307

08000674 <ADC_ConversionStop_Disable>:
{
 8000674:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000676:	6803      	ldr	r3, [r0, #0]
{
 8000678:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800067a:	689a      	ldr	r2, [r3, #8]
 800067c:	07d2      	lsls	r2, r2, #31
 800067e:	d401      	bmi.n	8000684 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000680:	2000      	movs	r0, #0
}
 8000682:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	f022 0201 	bic.w	r2, r2, #1
 800068a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800068c:	f7ff fd7e 	bl	800018c <HAL_GetTick>
 8000690:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	07db      	lsls	r3, r3, #31
 8000698:	d5f2      	bpl.n	8000680 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800069a:	f7ff fd77 	bl	800018c <HAL_GetTick>
 800069e:	1b40      	subs	r0, r0, r5
 80006a0:	2802      	cmp	r0, #2
 80006a2:	d9f6      	bls.n	8000692 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006a6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006b6:	e7e4      	b.n	8000682 <ADC_ConversionStop_Disable+0xe>

080006b8 <HAL_ADC_Init>:
{
 80006b8:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80006ba:	4604      	mov	r4, r0
 80006bc:	2800      	cmp	r0, #0
 80006be:	d070      	beq.n	80007a2 <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80006c2:	b923      	cbnz	r3, 80006ce <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80006c4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80006c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80006ca:	f002 f8c3 	bl	8002854 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006ce:	4620      	mov	r0, r4
 80006d0:	f7ff ffd0 	bl	8000674 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006d6:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80006da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006dc:	d163      	bne.n	80007a6 <HAL_ADC_Init+0xee>
 80006de:	2800      	cmp	r0, #0
 80006e0:	d161      	bne.n	80007a6 <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80006e2:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80006e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80006e8:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80006ea:	f023 0302 	bic.w	r3, r3, #2
 80006ee:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80006f2:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006f4:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80006f6:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80006f8:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006fa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006fe:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000702:	d037      	beq.n	8000774 <HAL_ADC_Init+0xbc>
 8000704:	2901      	cmp	r1, #1
 8000706:	bf14      	ite	ne
 8000708:	4606      	movne	r6, r0
 800070a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800070e:	6965      	ldr	r5, [r4, #20]
 8000710:	2d01      	cmp	r5, #1
 8000712:	d106      	bne.n	8000722 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000714:	bb83      	cbnz	r3, 8000778 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000716:	69a3      	ldr	r3, [r4, #24]
 8000718:	3b01      	subs	r3, #1
 800071a:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800071e:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000722:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000724:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000728:	685d      	ldr	r5, [r3, #4]
 800072a:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800072e:	ea45 0506 	orr.w	r5, r5, r6
 8000732:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000734:	689e      	ldr	r6, [r3, #8]
 8000736:	4d1e      	ldr	r5, [pc, #120]	; (80007b0 <HAL_ADC_Init+0xf8>)
 8000738:	ea05 0506 	and.w	r5, r5, r6
 800073c:	ea45 0502 	orr.w	r5, r5, r2
 8000740:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000742:	d001      	beq.n	8000748 <HAL_ADC_Init+0x90>
 8000744:	2901      	cmp	r1, #1
 8000746:	d120      	bne.n	800078a <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000748:	6921      	ldr	r1, [r4, #16]
 800074a:	3901      	subs	r1, #1
 800074c:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800074e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000750:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000754:	4329      	orrs	r1, r5
 8000756:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000758:	6899      	ldr	r1, [r3, #8]
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <HAL_ADC_Init+0xfc>)
 800075c:	400b      	ands	r3, r1
 800075e:	429a      	cmp	r2, r3
 8000760:	d115      	bne.n	800078e <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 8000762:	2300      	movs	r3, #0
 8000764:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000768:	f023 0303 	bic.w	r3, r3, #3
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000772:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000774:	460e      	mov	r6, r1
 8000776:	e7ca      	b.n	800070e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800077a:	f043 0320 	orr.w	r3, r3, #32
 800077e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000780:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000788:	e7cb      	b.n	8000722 <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 800078a:	2100      	movs	r1, #0
 800078c:	e7df      	b.n	800074e <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 800078e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000790:	f023 0312 	bic.w	r3, r3, #18
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800079a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80007a2:	2001      	movs	r0, #1
 80007a4:	e7e5      	b.n	8000772 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80007ac:	e7f9      	b.n	80007a2 <HAL_ADC_Init+0xea>
 80007ae:	bf00      	nop
 80007b0:	ffe1f7fd 	.word	0xffe1f7fd
 80007b4:	ff1f0efe 	.word	0xff1f0efe

080007b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007be:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007ca:	041b      	lsls	r3, r3, #16
 80007cc:	0c1b      	lsrs	r3, r3, #16
 80007ce:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007d8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e2:	b570      	push	{r4, r5, r6, lr}
 80007e4:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e6:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ea:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ee:	f1c4 0507 	rsb	r5, r4, #7
 80007f2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f8:	bf28      	it	cs
 80007fa:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fc:	2b06      	cmp	r3, #6
 80007fe:	bf98      	it	ls
 8000800:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000802:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000806:	bf88      	it	hi
 8000808:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080a:	ea21 0303 	bic.w	r3, r1, r3
 800080e:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	fa06 f404 	lsl.w	r4, r6, r4
 8000814:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8000818:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081a:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	bfa8      	it	ge
 8000820:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000824:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	bfb8      	it	lt
 800082a:	4a06      	ldrlt	r2, [pc, #24]	; (8000844 <HAL_NVIC_SetPriority+0x64>)
 800082c:	b2db      	uxtb	r3, r3
 800082e:	bfb5      	itete	lt
 8000830:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000834:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000838:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	e000ed00 	.word	0xe000ed00
 8000844:	e000ed14 	.word	0xe000ed14

08000848 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000848:	2301      	movs	r3, #1
 800084a:	0942      	lsrs	r2, r0, #5
 800084c:	f000 001f 	and.w	r0, r0, #31
 8000850:	fa03 f000 	lsl.w	r0, r3, r0
 8000854:	4b01      	ldr	r3, [pc, #4]	; (800085c <HAL_NVIC_EnableIRQ+0x14>)
 8000856:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100

08000860 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000860:	3801      	subs	r0, #1
 8000862:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000866:	d20a      	bcs.n	800087e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000868:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000874:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000876:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000878:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800087e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000e010 	.word	0xe000e010
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800088e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	bf0c      	ite	eq
 8000894:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000898:	f022 0204 	bicne.w	r2, r2, #4
 800089c:	601a      	str	r2, [r3, #0]
  }
}
 800089e:	4770      	bx	lr
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008a4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80008a6:	b350      	cbz	r0, 80008fe <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008a8:	2214      	movs	r2, #20
 80008aa:	6801      	ldr	r1, [r0, #0]
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_DMA_Init+0x60>)
 80008ae:	440b      	add	r3, r1
 80008b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <HAL_DMA_Init+0x64>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008ba:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80008bc:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008be:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80008c2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008c6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ca:	4323      	orrs	r3, r4
 80008cc:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008ce:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008d2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d4:	6944      	ldr	r4, [r0, #20]
 80008d6:	4323      	orrs	r3, r4
 80008d8:	6984      	ldr	r4, [r0, #24]
 80008da:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80008dc:	69c4      	ldr	r4, [r0, #28]
 80008de:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80008e0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008e2:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008e4:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 80008e6:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80008e8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 80008ec:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 80008f0:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008f4:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80008f6:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 80008fa:	4618      	mov	r0, r3
}
 80008fc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80008fe:	2001      	movs	r0, #1
 8000900:	e7fc      	b.n	80008fc <HAL_DMA_Init+0x58>
 8000902:	bf00      	nop
 8000904:	bffdfff8 	.word	0xbffdfff8
 8000908:	40020000 	.word	0x40020000

0800090c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800090e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000912:	2c01      	cmp	r4, #1
 8000914:	d035      	beq.n	8000982 <HAL_DMA_Start_IT+0x76>
 8000916:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000918:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800091c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000920:	42a5      	cmp	r5, r4
 8000922:	f04f 0600 	mov.w	r6, #0
 8000926:	f04f 0402 	mov.w	r4, #2
 800092a:	d128      	bne.n	800097e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800092c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000930:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000932:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000934:	6826      	ldr	r6, [r4, #0]
 8000936:	f026 0601 	bic.w	r6, r6, #1
 800093a:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800093c:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8000940:	40bd      	lsls	r5, r7
 8000942:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000944:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000946:	6843      	ldr	r3, [r0, #4]
 8000948:	6805      	ldr	r5, [r0, #0]
 800094a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800094c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800094e:	bf0b      	itete	eq
 8000950:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000952:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000954:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000956:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000958:	b14b      	cbz	r3, 800096e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8000960:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000962:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	602b      	str	r3, [r5, #0]
}
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	f023 0304 	bic.w	r3, r3, #4
 8000974:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	f043 030a 	orr.w	r3, r3, #10
 800097c:	e7f0      	b.n	8000960 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800097e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000982:	2002      	movs	r0, #2
 8000984:	e7f2      	b.n	800096c <HAL_DMA_Start_IT+0x60>
	...

08000988 <HAL_DMA_IRQHandler>:
{
 8000988:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800098a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800098c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800098e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000990:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000992:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000994:	4095      	lsls	r5, r2
 8000996:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000998:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800099a:	d032      	beq.n	8000a02 <HAL_DMA_IRQHandler+0x7a>
 800099c:	074d      	lsls	r5, r1, #29
 800099e:	d530      	bpl.n	8000a02 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009a4:	bf5e      	ittt	pl
 80009a6:	681a      	ldrpl	r2, [r3, #0]
 80009a8:	f022 0204 	bicpl.w	r2, r2, #4
 80009ac:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009ae:	4a3e      	ldr	r2, [pc, #248]	; (8000aa8 <HAL_DMA_IRQHandler+0x120>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d019      	beq.n	80009e8 <HAL_DMA_IRQHandler+0x60>
 80009b4:	3214      	adds	r2, #20
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d018      	beq.n	80009ec <HAL_DMA_IRQHandler+0x64>
 80009ba:	3214      	adds	r2, #20
 80009bc:	4293      	cmp	r3, r2
 80009be:	d017      	beq.n	80009f0 <HAL_DMA_IRQHandler+0x68>
 80009c0:	3214      	adds	r2, #20
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d017      	beq.n	80009f6 <HAL_DMA_IRQHandler+0x6e>
 80009c6:	3214      	adds	r2, #20
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d017      	beq.n	80009fc <HAL_DMA_IRQHandler+0x74>
 80009cc:	3214      	adds	r2, #20
 80009ce:	4293      	cmp	r3, r2
 80009d0:	bf0c      	ite	eq
 80009d2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80009d6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80009da:	4a34      	ldr	r2, [pc, #208]	; (8000aac <HAL_DMA_IRQHandler+0x124>)
 80009dc:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80009de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d05e      	beq.n	8000aa2 <HAL_DMA_IRQHandler+0x11a>
}
 80009e4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80009e6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009e8:	2304      	movs	r3, #4
 80009ea:	e7f6      	b.n	80009da <HAL_DMA_IRQHandler+0x52>
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	e7f4      	b.n	80009da <HAL_DMA_IRQHandler+0x52>
 80009f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f4:	e7f1      	b.n	80009da <HAL_DMA_IRQHandler+0x52>
 80009f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009fa:	e7ee      	b.n	80009da <HAL_DMA_IRQHandler+0x52>
 80009fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a00:	e7eb      	b.n	80009da <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000a02:	2502      	movs	r5, #2
 8000a04:	4095      	lsls	r5, r2
 8000a06:	4225      	tst	r5, r4
 8000a08:	d035      	beq.n	8000a76 <HAL_DMA_IRQHandler+0xee>
 8000a0a:	078d      	lsls	r5, r1, #30
 8000a0c:	d533      	bpl.n	8000a76 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	0694      	lsls	r4, r2, #26
 8000a12:	d406      	bmi.n	8000a22 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	f022 020a 	bic.w	r2, r2, #10
 8000a1a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <HAL_DMA_IRQHandler+0x120>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d019      	beq.n	8000a5c <HAL_DMA_IRQHandler+0xd4>
 8000a28:	3214      	adds	r2, #20
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d018      	beq.n	8000a60 <HAL_DMA_IRQHandler+0xd8>
 8000a2e:	3214      	adds	r2, #20
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d017      	beq.n	8000a64 <HAL_DMA_IRQHandler+0xdc>
 8000a34:	3214      	adds	r2, #20
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d017      	beq.n	8000a6a <HAL_DMA_IRQHandler+0xe2>
 8000a3a:	3214      	adds	r2, #20
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d017      	beq.n	8000a70 <HAL_DMA_IRQHandler+0xe8>
 8000a40:	3214      	adds	r2, #20
 8000a42:	4293      	cmp	r3, r2
 8000a44:	bf0c      	ite	eq
 8000a46:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000a4a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_DMA_IRQHandler+0x124>)
 8000a50:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000a52:	2300      	movs	r3, #0
 8000a54:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000a58:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a5a:	e7c1      	b.n	80009e0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e7f6      	b.n	8000a4e <HAL_DMA_IRQHandler+0xc6>
 8000a60:	2320      	movs	r3, #32
 8000a62:	e7f4      	b.n	8000a4e <HAL_DMA_IRQHandler+0xc6>
 8000a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a68:	e7f1      	b.n	8000a4e <HAL_DMA_IRQHandler+0xc6>
 8000a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6e:	e7ee      	b.n	8000a4e <HAL_DMA_IRQHandler+0xc6>
 8000a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a74:	e7eb      	b.n	8000a4e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a76:	2508      	movs	r5, #8
 8000a78:	4095      	lsls	r5, r2
 8000a7a:	4225      	tst	r5, r4
 8000a7c:	d011      	beq.n	8000aa2 <HAL_DMA_IRQHandler+0x11a>
 8000a7e:	0709      	lsls	r1, r1, #28
 8000a80:	d50f      	bpl.n	8000aa2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	f021 010e 	bic.w	r1, r1, #14
 8000a88:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	fa03 f202 	lsl.w	r2, r3, r2
 8000a90:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000a92:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000a94:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000a9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000aa0:	e79e      	b.n	80009e0 <HAL_DMA_IRQHandler+0x58>
}
 8000aa2:	bc70      	pop	{r4, r5, r6}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40020008 	.word	0x40020008
 8000aac:	40020000 	.word	0x40020000

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000ab4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ab6:	4616      	mov	r6, r2
 8000ab8:	4b65      	ldr	r3, [pc, #404]	; (8000c50 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000c60 <HAL_GPIO_Init+0x1b0>
 8000abe:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000c64 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000ac2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000ac8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000acc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000ad0:	45a0      	cmp	r8, r4
 8000ad2:	d17e      	bne.n	8000bd2 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8000ad4:	684d      	ldr	r5, [r1, #4]
 8000ad6:	2d12      	cmp	r5, #18
 8000ad8:	f000 80ae 	beq.w	8000c38 <HAL_GPIO_Init+0x188>
 8000adc:	f200 8087 	bhi.w	8000bee <HAL_GPIO_Init+0x13e>
 8000ae0:	2d02      	cmp	r5, #2
 8000ae2:	f000 80a6 	beq.w	8000c32 <HAL_GPIO_Init+0x182>
 8000ae6:	d87b      	bhi.n	8000be0 <HAL_GPIO_Init+0x130>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	f000 808d 	beq.w	8000c08 <HAL_GPIO_Init+0x158>
 8000aee:	2d01      	cmp	r5, #1
 8000af0:	f000 809d 	beq.w	8000c2e <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000af4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af8:	2cff      	cmp	r4, #255	; 0xff
 8000afa:	bf93      	iteet	ls
 8000afc:	4682      	movls	sl, r0
 8000afe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000b02:	3d08      	subhi	r5, #8
 8000b04:	f8d0 b000 	ldrls.w	fp, [r0]
 8000b08:	bf92      	itee	ls
 8000b0a:	00b5      	lslls	r5, r6, #2
 8000b0c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000b10:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b12:	fa09 f805 	lsl.w	r8, r9, r5
 8000b16:	ea2b 0808 	bic.w	r8, fp, r8
 8000b1a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b1e:	bf88      	it	hi
 8000b20:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b24:	ea48 0505 	orr.w	r5, r8, r5
 8000b28:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b2c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000b30:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000b34:	d04d      	beq.n	8000bd2 <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b36:	4f47      	ldr	r7, [pc, #284]	; (8000c54 <HAL_GPIO_Init+0x1a4>)
 8000b38:	f026 0803 	bic.w	r8, r6, #3
 8000b3c:	69bd      	ldr	r5, [r7, #24]
 8000b3e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000b42:	f045 0501 	orr.w	r5, r5, #1
 8000b46:	61bd      	str	r5, [r7, #24]
 8000b48:	69bd      	ldr	r5, [r7, #24]
 8000b4a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000b4e:	f005 0501 	and.w	r5, r5, #1
 8000b52:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b54:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b58:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b5a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000b5e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b62:	fa09 f90b 	lsl.w	r9, r9, fp
 8000b66:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b6a:	4d3b      	ldr	r5, [pc, #236]	; (8000c58 <HAL_GPIO_Init+0x1a8>)
 8000b6c:	42a8      	cmp	r0, r5
 8000b6e:	d068      	beq.n	8000c42 <HAL_GPIO_Init+0x192>
 8000b70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b74:	42a8      	cmp	r0, r5
 8000b76:	d066      	beq.n	8000c46 <HAL_GPIO_Init+0x196>
 8000b78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b7c:	42a8      	cmp	r0, r5
 8000b7e:	d064      	beq.n	8000c4a <HAL_GPIO_Init+0x19a>
 8000b80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b84:	42a8      	cmp	r0, r5
 8000b86:	bf0c      	ite	eq
 8000b88:	2503      	moveq	r5, #3
 8000b8a:	2504      	movne	r5, #4
 8000b8c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b90:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000b94:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b98:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000b9e:	bf14      	ite	ne
 8000ba0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ba2:	43a5      	biceq	r5, r4
 8000ba4:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ba6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000bac:	bf14      	ite	ne
 8000bae:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bb0:	43a5      	biceq	r5, r4
 8000bb2:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bb4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bba:	bf14      	ite	ne
 8000bbc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bbe:	43a5      	biceq	r5, r4
 8000bc0:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc2:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc8:	bf14      	ite	ne
 8000bca:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bcc:	ea25 0404 	biceq.w	r4, r5, r4
 8000bd0:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000bd2:	3601      	adds	r6, #1
 8000bd4:	2e10      	cmp	r6, #16
 8000bd6:	f47f af74 	bne.w	8000ac2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000bda:	b003      	add	sp, #12
 8000bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000be0:	2d03      	cmp	r5, #3
 8000be2:	d022      	beq.n	8000c2a <HAL_GPIO_Init+0x17a>
 8000be4:	2d11      	cmp	r5, #17
 8000be6:	d185      	bne.n	8000af4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be8:	68ca      	ldr	r2, [r1, #12]
 8000bea:	3204      	adds	r2, #4
          break;
 8000bec:	e782      	b.n	8000af4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000bee:	4f1b      	ldr	r7, [pc, #108]	; (8000c5c <HAL_GPIO_Init+0x1ac>)
 8000bf0:	42bd      	cmp	r5, r7
 8000bf2:	d009      	beq.n	8000c08 <HAL_GPIO_Init+0x158>
 8000bf4:	d812      	bhi.n	8000c1c <HAL_GPIO_Init+0x16c>
 8000bf6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000c68 <HAL_GPIO_Init+0x1b8>
 8000bfa:	454d      	cmp	r5, r9
 8000bfc:	d004      	beq.n	8000c08 <HAL_GPIO_Init+0x158>
 8000bfe:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000c02:	454d      	cmp	r5, r9
 8000c04:	f47f af76 	bne.w	8000af4 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c08:	688a      	ldr	r2, [r1, #8]
 8000c0a:	b1c2      	cbz	r2, 8000c3e <HAL_GPIO_Init+0x18e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c0c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000c0e:	bf0c      	ite	eq
 8000c10:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c14:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c18:	2208      	movs	r2, #8
 8000c1a:	e76b      	b.n	8000af4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000c1c:	4565      	cmp	r5, ip
 8000c1e:	d0f3      	beq.n	8000c08 <HAL_GPIO_Init+0x158>
 8000c20:	4575      	cmp	r5, lr
 8000c22:	d0f1      	beq.n	8000c08 <HAL_GPIO_Init+0x158>
 8000c24:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000c6c <HAL_GPIO_Init+0x1bc>
 8000c28:	e7eb      	b.n	8000c02 <HAL_GPIO_Init+0x152>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	e762      	b.n	8000af4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c2e:	68ca      	ldr	r2, [r1, #12]
          break;
 8000c30:	e760      	b.n	8000af4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c32:	68ca      	ldr	r2, [r1, #12]
 8000c34:	3208      	adds	r2, #8
          break;
 8000c36:	e75d      	b.n	8000af4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c38:	68ca      	ldr	r2, [r1, #12]
 8000c3a:	320c      	adds	r2, #12
          break;
 8000c3c:	e75a      	b.n	8000af4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c3e:	2204      	movs	r2, #4
 8000c40:	e758      	b.n	8000af4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c42:	2500      	movs	r5, #0
 8000c44:	e7a2      	b.n	8000b8c <HAL_GPIO_Init+0xdc>
 8000c46:	2501      	movs	r5, #1
 8000c48:	e7a0      	b.n	8000b8c <HAL_GPIO_Init+0xdc>
 8000c4a:	2502      	movs	r5, #2
 8000c4c:	e79e      	b.n	8000b8c <HAL_GPIO_Init+0xdc>
 8000c4e:	bf00      	nop
 8000c50:	40010400 	.word	0x40010400
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	10210000 	.word	0x10210000
 8000c60:	10310000 	.word	0x10310000
 8000c64:	10320000 	.word	0x10320000
 8000c68:	10110000 	.word	0x10110000
 8000c6c:	10220000 	.word	0x10220000

08000c70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	b10a      	cbz	r2, 8000c76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c72:	6101      	str	r1, [r0, #16]
  }
}
 8000c74:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c76:	0409      	lsls	r1, r1, #16
 8000c78:	e7fb      	b.n	8000c72 <HAL_GPIO_WritePin+0x2>
	...

08000c7c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7c:	6803      	ldr	r3, [r0, #0]
{
 8000c7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c82:	07db      	lsls	r3, r3, #31
{
 8000c84:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c86:	d410      	bmi.n	8000caa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c88:	682b      	ldr	r3, [r5, #0]
 8000c8a:	079f      	lsls	r7, r3, #30
 8000c8c:	d45e      	bmi.n	8000d4c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c8e:	682b      	ldr	r3, [r5, #0]
 8000c90:	0719      	lsls	r1, r3, #28
 8000c92:	f100 8095 	bmi.w	8000dc0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c96:	682b      	ldr	r3, [r5, #0]
 8000c98:	075a      	lsls	r2, r3, #29
 8000c9a:	f100 80bf 	bmi.w	8000e1c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c9e:	69ea      	ldr	r2, [r5, #28]
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 812d 	bne.w	8000f00 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	e014      	b.n	8000cd4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000caa:	4c90      	ldr	r4, [pc, #576]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000cac:	6863      	ldr	r3, [r4, #4]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d007      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb6:	6863      	ldr	r3, [r4, #4]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	d10c      	bne.n	8000cda <HAL_RCC_OscConfig+0x5e>
 8000cc0:	6863      	ldr	r3, [r4, #4]
 8000cc2:	03de      	lsls	r6, r3, #15
 8000cc4:	d509      	bpl.n	8000cda <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	039c      	lsls	r4, r3, #14
 8000cca:	d5dd      	bpl.n	8000c88 <HAL_RCC_OscConfig+0xc>
 8000ccc:	686b      	ldr	r3, [r5, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1da      	bne.n	8000c88 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000cd2:	2001      	movs	r0, #1
}
 8000cd4:	b002      	add	sp, #8
 8000cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cda:	686b      	ldr	r3, [r5, #4]
 8000cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce0:	d110      	bne.n	8000d04 <HAL_RCC_OscConfig+0x88>
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cea:	f7ff fa4f 	bl	800018c <HAL_GetTick>
 8000cee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	0398      	lsls	r0, r3, #14
 8000cf4:	d4c8      	bmi.n	8000c88 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf6:	f7ff fa49 	bl	800018c <HAL_GetTick>
 8000cfa:	1b80      	subs	r0, r0, r6
 8000cfc:	2864      	cmp	r0, #100	; 0x64
 8000cfe:	d9f7      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d00:	2003      	movs	r0, #3
 8000d02:	e7e7      	b.n	8000cd4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d04:	b99b      	cbnz	r3, 8000d2e <HAL_RCC_OscConfig+0xb2>
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0c:	6023      	str	r3, [r4, #0]
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d16:	f7ff fa39 	bl	800018c <HAL_GetTick>
 8000d1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	0399      	lsls	r1, r3, #14
 8000d20:	d5b2      	bpl.n	8000c88 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d22:	f7ff fa33 	bl	800018c <HAL_GetTick>
 8000d26:	1b80      	subs	r0, r0, r6
 8000d28:	2864      	cmp	r0, #100	; 0x64
 8000d2a:	d9f7      	bls.n	8000d1c <HAL_RCC_OscConfig+0xa0>
 8000d2c:	e7e8      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	d103      	bne.n	8000d3e <HAL_RCC_OscConfig+0xc2>
 8000d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3a:	6023      	str	r3, [r4, #0]
 8000d3c:	e7d1      	b.n	8000ce2 <HAL_RCC_OscConfig+0x66>
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6023      	str	r3, [r4, #0]
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4a:	e7cd      	b.n	8000ce8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d4c:	4c67      	ldr	r4, [pc, #412]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000d4e:	6863      	ldr	r3, [r4, #4]
 8000d50:	f013 0f0c 	tst.w	r3, #12
 8000d54:	d007      	beq.n	8000d66 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d56:	6863      	ldr	r3, [r4, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d110      	bne.n	8000d82 <HAL_RCC_OscConfig+0x106>
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	03da      	lsls	r2, r3, #15
 8000d64:	d40d      	bmi.n	8000d82 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	079b      	lsls	r3, r3, #30
 8000d6a:	d502      	bpl.n	8000d72 <HAL_RCC_OscConfig+0xf6>
 8000d6c:	692b      	ldr	r3, [r5, #16]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d1af      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	696a      	ldr	r2, [r5, #20]
 8000d76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d7a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d7e:	6023      	str	r3, [r4, #0]
 8000d80:	e785      	b.n	8000c8e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d82:	692a      	ldr	r2, [r5, #16]
 8000d84:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d86:	b16a      	cbz	r2, 8000da4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000d88:	2201      	movs	r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d8c:	f7ff f9fe 	bl	800018c <HAL_GetTick>
 8000d90:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	079f      	lsls	r7, r3, #30
 8000d96:	d4ec      	bmi.n	8000d72 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d98:	f7ff f9f8 	bl	800018c <HAL_GetTick>
 8000d9c:	1b80      	subs	r0, r0, r6
 8000d9e:	2802      	cmp	r0, #2
 8000da0:	d9f7      	bls.n	8000d92 <HAL_RCC_OscConfig+0x116>
 8000da2:	e7ad      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000da4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000da6:	f7ff f9f1 	bl	800018c <HAL_GetTick>
 8000daa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	0798      	lsls	r0, r3, #30
 8000db0:	f57f af6d 	bpl.w	8000c8e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db4:	f7ff f9ea 	bl	800018c <HAL_GetTick>
 8000db8:	1b80      	subs	r0, r0, r6
 8000dba:	2802      	cmp	r0, #2
 8000dbc:	d9f6      	bls.n	8000dac <HAL_RCC_OscConfig+0x130>
 8000dbe:	e79f      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc0:	69aa      	ldr	r2, [r5, #24]
 8000dc2:	4c4a      	ldr	r4, [pc, #296]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000dc4:	4b4b      	ldr	r3, [pc, #300]	; (8000ef4 <HAL_RCC_OscConfig+0x278>)
 8000dc6:	b1da      	cbz	r2, 8000e00 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dcc:	f7ff f9de 	bl	800018c <HAL_GetTick>
 8000dd0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dd4:	079b      	lsls	r3, r3, #30
 8000dd6:	d50d      	bpl.n	8000df4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000dd8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ddc:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <HAL_RCC_OscConfig+0x27c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000de4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000de6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000de8:	9b01      	ldr	r3, [sp, #4]
 8000dea:	1e5a      	subs	r2, r3, #1
 8000dec:	9201      	str	r2, [sp, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f9      	bne.n	8000de6 <HAL_RCC_OscConfig+0x16a>
 8000df2:	e750      	b.n	8000c96 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000df4:	f7ff f9ca 	bl	800018c <HAL_GetTick>
 8000df8:	1b80      	subs	r0, r0, r6
 8000dfa:	2802      	cmp	r0, #2
 8000dfc:	d9e9      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x156>
 8000dfe:	e77f      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e02:	f7ff f9c3 	bl	800018c <HAL_GetTick>
 8000e06:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e0a:	079f      	lsls	r7, r3, #30
 8000e0c:	f57f af43 	bpl.w	8000c96 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e10:	f7ff f9bc 	bl	800018c <HAL_GetTick>
 8000e14:	1b80      	subs	r0, r0, r6
 8000e16:	2802      	cmp	r0, #2
 8000e18:	d9f6      	bls.n	8000e08 <HAL_RCC_OscConfig+0x18c>
 8000e1a:	e771      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1c:	4c33      	ldr	r4, [pc, #204]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000e1e:	69e3      	ldr	r3, [r4, #28]
 8000e20:	00d8      	lsls	r0, r3, #3
 8000e22:	d424      	bmi.n	8000e6e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e24:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	69e3      	ldr	r3, [r4, #28]
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	61e3      	str	r3, [r4, #28]
 8000e2e:	69e3      	ldr	r3, [r4, #28]
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e38:	4e30      	ldr	r6, [pc, #192]	; (8000efc <HAL_RCC_OscConfig+0x280>)
 8000e3a:	6833      	ldr	r3, [r6, #0]
 8000e3c:	05d9      	lsls	r1, r3, #23
 8000e3e:	d518      	bpl.n	8000e72 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e40:	68eb      	ldr	r3, [r5, #12]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d126      	bne.n	8000e94 <HAL_RCC_OscConfig+0x218>
 8000e46:	6a23      	ldr	r3, [r4, #32]
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e4e:	f7ff f99d 	bl	800018c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e52:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e56:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e58:	6a23      	ldr	r3, [r4, #32]
 8000e5a:	079b      	lsls	r3, r3, #30
 8000e5c:	d53f      	bpl.n	8000ede <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000e5e:	2f00      	cmp	r7, #0
 8000e60:	f43f af1d 	beq.w	8000c9e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e64:	69e3      	ldr	r3, [r4, #28]
 8000e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	61e3      	str	r3, [r4, #28]
 8000e6c:	e717      	b.n	8000c9e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000e6e:	2700      	movs	r7, #0
 8000e70:	e7e2      	b.n	8000e38 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e72:	6833      	ldr	r3, [r6, #0]
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e7a:	f7ff f987 	bl	800018c <HAL_GetTick>
 8000e7e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e80:	6833      	ldr	r3, [r6, #0]
 8000e82:	05da      	lsls	r2, r3, #23
 8000e84:	d4dc      	bmi.n	8000e40 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e86:	f7ff f981 	bl	800018c <HAL_GetTick>
 8000e8a:	eba0 0008 	sub.w	r0, r0, r8
 8000e8e:	2864      	cmp	r0, #100	; 0x64
 8000e90:	d9f6      	bls.n	8000e80 <HAL_RCC_OscConfig+0x204>
 8000e92:	e735      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e94:	b9ab      	cbnz	r3, 8000ec2 <HAL_RCC_OscConfig+0x246>
 8000e96:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	6223      	str	r3, [r4, #32]
 8000ea2:	6a23      	ldr	r3, [r4, #32]
 8000ea4:	f023 0304 	bic.w	r3, r3, #4
 8000ea8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000eaa:	f7ff f96f 	bl	800018c <HAL_GetTick>
 8000eae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb0:	6a23      	ldr	r3, [r4, #32]
 8000eb2:	0798      	lsls	r0, r3, #30
 8000eb4:	d5d3      	bpl.n	8000e5e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb6:	f7ff f969 	bl	800018c <HAL_GetTick>
 8000eba:	1b80      	subs	r0, r0, r6
 8000ebc:	4540      	cmp	r0, r8
 8000ebe:	d9f7      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x234>
 8000ec0:	e71e      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec2:	2b05      	cmp	r3, #5
 8000ec4:	6a23      	ldr	r3, [r4, #32]
 8000ec6:	d103      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x254>
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6223      	str	r3, [r4, #32]
 8000ece:	e7ba      	b.n	8000e46 <HAL_RCC_OscConfig+0x1ca>
 8000ed0:	f023 0301 	bic.w	r3, r3, #1
 8000ed4:	6223      	str	r3, [r4, #32]
 8000ed6:	6a23      	ldr	r3, [r4, #32]
 8000ed8:	f023 0304 	bic.w	r3, r3, #4
 8000edc:	e7b6      	b.n	8000e4c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ede:	f7ff f955 	bl	800018c <HAL_GetTick>
 8000ee2:	eba0 0008 	sub.w	r0, r0, r8
 8000ee6:	42b0      	cmp	r0, r6
 8000ee8:	d9b6      	bls.n	8000e58 <HAL_RCC_OscConfig+0x1dc>
 8000eea:	e709      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	42420000 	.word	0x42420000
 8000ef4:	42420480 	.word	0x42420480
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f00:	4c22      	ldr	r4, [pc, #136]	; (8000f8c <HAL_RCC_OscConfig+0x310>)
 8000f02:	6863      	ldr	r3, [r4, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	f43f aee2 	beq.w	8000cd2 <HAL_RCC_OscConfig+0x56>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	4e1f      	ldr	r6, [pc, #124]	; (8000f90 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f12:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f14:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f16:	d12b      	bne.n	8000f70 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f18:	f7ff f938 	bl	800018c <HAL_GetTick>
 8000f1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	0199      	lsls	r1, r3, #6
 8000f22:	d41f      	bmi.n	8000f64 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f24:	6a2b      	ldr	r3, [r5, #32]
 8000f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2a:	d105      	bne.n	8000f38 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f2c:	6862      	ldr	r2, [r4, #4]
 8000f2e:	68a9      	ldr	r1, [r5, #8]
 8000f30:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f34:	430a      	orrs	r2, r1
 8000f36:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f38:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f3a:	6862      	ldr	r2, [r4, #4]
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f42:	4313      	orrs	r3, r2
 8000f44:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f46:	2301      	movs	r3, #1
 8000f48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f4a:	f7ff f91f 	bl	800018c <HAL_GetTick>
 8000f4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	019a      	lsls	r2, r3, #6
 8000f54:	f53f aea7 	bmi.w	8000ca6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f58:	f7ff f918 	bl	800018c <HAL_GetTick>
 8000f5c:	1b40      	subs	r0, r0, r5
 8000f5e:	2802      	cmp	r0, #2
 8000f60:	d9f6      	bls.n	8000f50 <HAL_RCC_OscConfig+0x2d4>
 8000f62:	e6cd      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f64:	f7ff f912 	bl	800018c <HAL_GetTick>
 8000f68:	1bc0      	subs	r0, r0, r7
 8000f6a:	2802      	cmp	r0, #2
 8000f6c:	d9d7      	bls.n	8000f1e <HAL_RCC_OscConfig+0x2a2>
 8000f6e:	e6c7      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f70:	f7ff f90c 	bl	800018c <HAL_GetTick>
 8000f74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	f57f ae94 	bpl.w	8000ca6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7e:	f7ff f905 	bl	800018c <HAL_GetTick>
 8000f82:	1b40      	subs	r0, r0, r5
 8000f84:	2802      	cmp	r0, #2
 8000f86:	d9f6      	bls.n	8000f76 <HAL_RCC_OscConfig+0x2fa>
 8000f88:	e6ba      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	42420060 	.word	0x42420060

08000f94 <HAL_RCC_GetSysClockFreq>:
{
 8000f94:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000f98:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f9a:	ac02      	add	r4, sp, #8
 8000f9c:	f103 0510 	add.w	r5, r3, #16
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	6859      	ldr	r1, [r3, #4]
 8000fa6:	3308      	adds	r3, #8
 8000fa8:	c203      	stmia	r2!, {r0, r1}
 8000faa:	42ab      	cmp	r3, r5
 8000fac:	4614      	mov	r4, r2
 8000fae:	d1f7      	bne.n	8000fa0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fb0:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8000fb4:	4911      	ldr	r1, [pc, #68]	; (8000ffc <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fb6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000fba:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fbc:	f003 020c 	and.w	r2, r3, #12
 8000fc0:	2a08      	cmp	r2, #8
 8000fc2:	d117      	bne.n	8000ff4 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fc4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000fc8:	a806      	add	r0, sp, #24
 8000fca:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fcc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fce:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fd2:	d50c      	bpl.n	8000fee <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fd4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fd6:	480a      	ldr	r0, [pc, #40]	; (8001000 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fd8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fdc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fde:	aa06      	add	r2, sp, #24
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fe6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000fea:	b007      	add	sp, #28
 8000fec:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <HAL_RCC_GetSysClockFreq+0x70>)
 8000ff0:	4350      	muls	r0, r2
 8000ff2:	e7fa      	b.n	8000fea <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000ff6:	e7f8      	b.n	8000fea <HAL_RCC_GetSysClockFreq+0x56>
 8000ff8:	08002a8c 	.word	0x08002a8c
 8000ffc:	40021000 	.word	0x40021000
 8001000:	007a1200 	.word	0x007a1200
 8001004:	003d0900 	.word	0x003d0900

08001008 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001008:	4a4c      	ldr	r2, [pc, #304]	; (800113c <HAL_RCC_ClockConfig+0x134>)
{
 800100a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800100e:	6813      	ldr	r3, [r2, #0]
{
 8001010:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	428b      	cmp	r3, r1
{
 8001018:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800101a:	d327      	bcc.n	800106c <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800101c:	682a      	ldr	r2, [r5, #0]
 800101e:	0791      	lsls	r1, r2, #30
 8001020:	d431      	bmi.n	8001086 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001022:	07d2      	lsls	r2, r2, #31
 8001024:	d437      	bmi.n	8001096 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001026:	4a45      	ldr	r2, [pc, #276]	; (800113c <HAL_RCC_ClockConfig+0x134>)
 8001028:	6813      	ldr	r3, [r2, #0]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	42b3      	cmp	r3, r6
 8001030:	d871      	bhi.n	8001116 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001032:	682a      	ldr	r2, [r5, #0]
 8001034:	4c42      	ldr	r4, [pc, #264]	; (8001140 <HAL_RCC_ClockConfig+0x138>)
 8001036:	f012 0f04 	tst.w	r2, #4
 800103a:	d177      	bne.n	800112c <HAL_RCC_ClockConfig+0x124>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800103c:	0713      	lsls	r3, r2, #28
 800103e:	d506      	bpl.n	800104e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001040:	6863      	ldr	r3, [r4, #4]
 8001042:	692a      	ldr	r2, [r5, #16]
 8001044:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001048:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800104c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800104e:	f7ff ffa1 	bl	8000f94 <HAL_RCC_GetSysClockFreq>
 8001052:	6863      	ldr	r3, [r4, #4]
 8001054:	4a3b      	ldr	r2, [pc, #236]	; (8001144 <HAL_RCC_ClockConfig+0x13c>)
 8001056:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	40d8      	lsrs	r0, r3
 800105e:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <HAL_RCC_ClockConfig+0x140>)
 8001060:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f001 fc40 	bl	80028e8 <HAL_InitTick>
  return HAL_OK;
 8001068:	2000      	movs	r0, #0
 800106a:	e00a      	b.n	8001082 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106c:	6813      	ldr	r3, [r2, #0]
 800106e:	f023 0307 	bic.w	r3, r3, #7
 8001072:	430b      	orrs	r3, r1
 8001074:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	428b      	cmp	r3, r1
 800107e:	d0cd      	beq.n	800101c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001080:	2001      	movs	r0, #1
}
 8001082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001086:	492e      	ldr	r1, [pc, #184]	; (8001140 <HAL_RCC_ClockConfig+0x138>)
 8001088:	68a8      	ldr	r0, [r5, #8]
 800108a:	684b      	ldr	r3, [r1, #4]
 800108c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001090:	4303      	orrs	r3, r0
 8001092:	604b      	str	r3, [r1, #4]
 8001094:	e7c5      	b.n	8001022 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001096:	686a      	ldr	r2, [r5, #4]
 8001098:	4c29      	ldr	r4, [pc, #164]	; (8001140 <HAL_RCC_ClockConfig+0x138>)
 800109a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109e:	d11b      	bne.n	80010d8 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a4:	d0ec      	beq.n	8001080 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ac:	f023 0303 	bic.w	r3, r3, #3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80010b4:	f7ff f86a 	bl	800018c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80010ba:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d113      	bne.n	80010e8 <HAL_RCC_ClockConfig+0xe0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c0:	6863      	ldr	r3, [r4, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d0ad      	beq.n	8001026 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ca:	f7ff f85f 	bl	800018c <HAL_GetTick>
 80010ce:	1bc0      	subs	r0, r0, r7
 80010d0:	4540      	cmp	r0, r8
 80010d2:	d9f5      	bls.n	80010c0 <HAL_RCC_ClockConfig+0xb8>
          return HAL_TIMEOUT;
 80010d4:	2003      	movs	r0, #3
 80010d6:	e7d4      	b.n	8001082 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010d8:	2a02      	cmp	r2, #2
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010e0:	e7e0      	b.n	80010a4 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e2:	f013 0f02 	tst.w	r3, #2
 80010e6:	e7dd      	b.n	80010a4 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d10f      	bne.n	800110c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ec:	6863      	ldr	r3, [r4, #4]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d097      	beq.n	8001026 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f6:	f7ff f849 	bl	800018c <HAL_GetTick>
 80010fa:	1bc0      	subs	r0, r0, r7
 80010fc:	4540      	cmp	r0, r8
 80010fe:	d9f5      	bls.n	80010ec <HAL_RCC_ClockConfig+0xe4>
 8001100:	e7e8      	b.n	80010d4 <HAL_RCC_ClockConfig+0xcc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001102:	f7ff f843 	bl	800018c <HAL_GetTick>
 8001106:	1bc0      	subs	r0, r0, r7
 8001108:	4540      	cmp	r0, r8
 800110a:	d8e3      	bhi.n	80010d4 <HAL_RCC_ClockConfig+0xcc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800110c:	6863      	ldr	r3, [r4, #4]
 800110e:	f013 0f0c 	tst.w	r3, #12
 8001112:	d1f6      	bne.n	8001102 <HAL_RCC_ClockConfig+0xfa>
 8001114:	e787      	b.n	8001026 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	f023 0307 	bic.w	r3, r3, #7
 800111c:	4333      	orrs	r3, r6
 800111e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001120:	6813      	ldr	r3, [r2, #0]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	42b3      	cmp	r3, r6
 8001128:	d1aa      	bne.n	8001080 <HAL_RCC_ClockConfig+0x78>
 800112a:	e782      	b.n	8001032 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800112c:	6863      	ldr	r3, [r4, #4]
 800112e:	68e9      	ldr	r1, [r5, #12]
 8001130:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001134:	430b      	orrs	r3, r1
 8001136:	6063      	str	r3, [r4, #4]
 8001138:	e780      	b.n	800103c <HAL_RCC_ClockConfig+0x34>
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000
 8001140:	40021000 	.word	0x40021000
 8001144:	08002eb0 	.word	0x08002eb0
 8001148:	20000008 	.word	0x20000008

0800114c <HAL_RCC_GetHCLKFreq>:
}
 800114c:	4b01      	ldr	r3, [pc, #4]	; (8001154 <HAL_RCC_GetHCLKFreq+0x8>)
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008

08001158 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <HAL_RCC_GetPCLK1Freq+0x14>)
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <HAL_RCC_GetPCLK1Freq+0x18>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001166:	6810      	ldr	r0, [r2, #0]
}    
 8001168:	40d8      	lsrs	r0, r3
 800116a:	4770      	bx	lr
 800116c:	40021000 	.word	0x40021000
 8001170:	08002ec0 	.word	0x08002ec0
 8001174:	20000008 	.word	0x20000008

08001178 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001178:	230f      	movs	r3, #15
 800117a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_RCC_GetClockConfig+0x34>)
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800118c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001194:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800119e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_RCC_GetClockConfig+0x38>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	600b      	str	r3, [r1, #0]
}
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011b4:	6803      	ldr	r3, [r0, #0]
{
 80011b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011ba:	07d9      	lsls	r1, r3, #31
{
 80011bc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011be:	d520      	bpl.n	8001202 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c0:	4c35      	ldr	r4, [pc, #212]	; (8001298 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011c2:	69e3      	ldr	r3, [r4, #28]
 80011c4:	00da      	lsls	r2, r3, #3
 80011c6:	d432      	bmi.n	800122e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80011c8:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	69e3      	ldr	r3, [r4, #28]
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	61e3      	str	r3, [r4, #28]
 80011d2:	69e3      	ldr	r3, [r4, #28]
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	4e2f      	ldr	r6, [pc, #188]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80011de:	6833      	ldr	r3, [r6, #0]
 80011e0:	05db      	lsls	r3, r3, #23
 80011e2:	d526      	bpl.n	8001232 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011e4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011e6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011ea:	d136      	bne.n	800125a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80011ec:	6a23      	ldr	r3, [r4, #32]
 80011ee:	686a      	ldr	r2, [r5, #4]
 80011f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011f4:	4313      	orrs	r3, r2
 80011f6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011f8:	b11f      	cbz	r7, 8001202 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fa:	69e3      	ldr	r3, [r4, #28]
 80011fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001200:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001202:	6828      	ldr	r0, [r5, #0]
 8001204:	0783      	lsls	r3, r0, #30
 8001206:	d506      	bpl.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800120a:	68a9      	ldr	r1, [r5, #8]
 800120c:	6853      	ldr	r3, [r2, #4]
 800120e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001212:	430b      	orrs	r3, r1
 8001214:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001216:	f010 0010 	ands.w	r0, r0, #16
 800121a:	d01b      	beq.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800121c:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800121e:	68e9      	ldr	r1, [r5, #12]
 8001220:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001222:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001224:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001228:	430b      	orrs	r3, r1
 800122a:	6053      	str	r3, [r2, #4]
 800122c:	e012      	b.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800122e:	2700      	movs	r7, #0
 8001230:	e7d4      	b.n	80011dc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001232:	6833      	ldr	r3, [r6, #0]
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800123a:	f7fe ffa7 	bl	800018c <HAL_GetTick>
 800123e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001240:	6833      	ldr	r3, [r6, #0]
 8001242:	05d8      	lsls	r0, r3, #23
 8001244:	d4ce      	bmi.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001246:	f7fe ffa1 	bl	800018c <HAL_GetTick>
 800124a:	eba0 0008 	sub.w	r0, r0, r8
 800124e:	2864      	cmp	r0, #100	; 0x64
 8001250:	d9f6      	bls.n	8001240 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001252:	2003      	movs	r0, #3
}
 8001254:	b002      	add	sp, #8
 8001256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800125a:	686a      	ldr	r2, [r5, #4]
 800125c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001260:	429a      	cmp	r2, r3
 8001262:	d0c3      	beq.n	80011ec <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001264:	2001      	movs	r0, #1
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001268:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800126a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800126c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800126e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001272:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001274:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001276:	07d9      	lsls	r1, r3, #31
 8001278:	d5b8      	bpl.n	80011ec <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800127a:	f7fe ff87 	bl	800018c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001282:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001284:	6a23      	ldr	r3, [r4, #32]
 8001286:	079a      	lsls	r2, r3, #30
 8001288:	d4b0      	bmi.n	80011ec <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128a:	f7fe ff7f 	bl	800018c <HAL_GetTick>
 800128e:	1b80      	subs	r0, r0, r6
 8001290:	4540      	cmp	r0, r8
 8001292:	d9f7      	bls.n	8001284 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001294:	e7dd      	b.n	8001252 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	40007000 	.word	0x40007000
 80012a0:	42420440 	.word	0x42420440

080012a4 <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80012a4:	4770      	bx	lr

080012a6 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012a6:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 80012a8:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	f042 0201 	orr.w	r2, r2, #1
 80012b0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	f042 0201 	orr.w	r2, r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
}
 80012ba:	4770      	bx	lr

080012bc <HAL_TIM_OC_DelayElapsedCallback>:
 80012bc:	4770      	bx	lr

080012be <HAL_TIM_IC_CaptureCallback>:
 80012be:	4770      	bx	lr

080012c0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80012c0:	4770      	bx	lr

080012c2 <HAL_TIM_TriggerCallback>:
 80012c2:	4770      	bx	lr

080012c4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012c4:	6803      	ldr	r3, [r0, #0]
{
 80012c6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012c8:	691a      	ldr	r2, [r3, #16]
{
 80012ca:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012cc:	0791      	lsls	r1, r2, #30
 80012ce:	d50e      	bpl.n	80012ee <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	0792      	lsls	r2, r2, #30
 80012d4:	d50b      	bpl.n	80012ee <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012d6:	f06f 0202 	mvn.w	r2, #2
 80012da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012dc:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012de:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012e0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012e2:	079b      	lsls	r3, r3, #30
 80012e4:	d077      	beq.n	80013d6 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80012e6:	f7ff ffea 	bl	80012be <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ea:	2300      	movs	r3, #0
 80012ec:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	0750      	lsls	r0, r2, #29
 80012f4:	d510      	bpl.n	8001318 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	0751      	lsls	r1, r2, #29
 80012fa:	d50d      	bpl.n	8001318 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012fc:	f06f 0204 	mvn.w	r2, #4
 8001300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001302:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001304:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001306:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001308:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800130c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800130e:	d068      	beq.n	80013e2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001310:	f7ff ffd5 	bl	80012be <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001314:	2300      	movs	r3, #0
 8001316:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	0712      	lsls	r2, r2, #28
 800131e:	d50f      	bpl.n	8001340 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	0710      	lsls	r0, r2, #28
 8001324:	d50c      	bpl.n	8001340 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001326:	f06f 0208 	mvn.w	r2, #8
 800132a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800132c:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800132e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001330:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001332:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001334:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001336:	d05a      	beq.n	80013ee <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001338:	f7ff ffc1 	bl	80012be <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800133c:	2300      	movs	r3, #0
 800133e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	06d2      	lsls	r2, r2, #27
 8001346:	d510      	bpl.n	800136a <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	06d0      	lsls	r0, r2, #27
 800134c:	d50d      	bpl.n	800136a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800134e:	f06f 0210 	mvn.w	r2, #16
 8001352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001354:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001356:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001358:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800135a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800135e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001360:	d04b      	beq.n	80013fa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001362:	f7ff ffac 	bl	80012be <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001366:	2300      	movs	r3, #0
 8001368:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	691a      	ldr	r2, [r3, #16]
 800136e:	07d1      	lsls	r1, r2, #31
 8001370:	d508      	bpl.n	8001384 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	07d2      	lsls	r2, r2, #31
 8001376:	d505      	bpl.n	8001384 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001378:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800137c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800137e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001380:	f000 ff5c 	bl	800223c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	0610      	lsls	r0, r2, #24
 800138a:	d508      	bpl.n	800139e <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	0611      	lsls	r1, r2, #24
 8001390:	d505      	bpl.n	800139e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001392:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001396:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001398:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800139a:	f000 f888 	bl	80014ae <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	0652      	lsls	r2, r2, #25
 80013a4:	d508      	bpl.n	80013b8 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	0650      	lsls	r0, r2, #25
 80013aa:	d505      	bpl.n	80013b8 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80013b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80013b4:	f7ff ff85 	bl	80012c2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	0691      	lsls	r1, r2, #26
 80013be:	d522      	bpl.n	8001406 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	0692      	lsls	r2, r2, #26
 80013c4:	d51f      	bpl.n	8001406 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013c6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80013ca:	4620      	mov	r0, r4
    }
  }
}
 80013cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80013d2:	f000 b86b 	b.w	80014ac <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013d6:	f7ff ff71 	bl	80012bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff ff70 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80013e0:	e783      	b.n	80012ea <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013e2:	f7ff ff6b 	bl	80012bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff ff6a 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80013ec:	e792      	b.n	8001314 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ee:	f7ff ff65 	bl	80012bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013f2:	4620      	mov	r0, r4
 80013f4:	f7ff ff64 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80013f8:	e7a0      	b.n	800133c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013fa:	f7ff ff5f 	bl	80012bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff ff5e 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001404:	e7af      	b.n	8001366 <HAL_TIM_IRQHandler+0xa2>
}
 8001406:	bd10      	pop	{r4, pc}

08001408 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001408:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800140a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800140c:	4290      	cmp	r0, r2
 800140e:	d00a      	beq.n	8001426 <TIM_Base_SetConfig+0x1e>
 8001410:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001414:	d007      	beq.n	8001426 <TIM_Base_SetConfig+0x1e>
 8001416:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800141a:	4290      	cmp	r0, r2
 800141c:	d003      	beq.n	8001426 <TIM_Base_SetConfig+0x1e>
 800141e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001422:	4290      	cmp	r0, r2
 8001424:	d115      	bne.n	8001452 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001426:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800142c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800142e:	4a11      	ldr	r2, [pc, #68]	; (8001474 <TIM_Base_SetConfig+0x6c>)
 8001430:	4290      	cmp	r0, r2
 8001432:	d00a      	beq.n	800144a <TIM_Base_SetConfig+0x42>
 8001434:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001438:	d007      	beq.n	800144a <TIM_Base_SetConfig+0x42>
 800143a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800143e:	4290      	cmp	r0, r2
 8001440:	d003      	beq.n	800144a <TIM_Base_SetConfig+0x42>
 8001442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001446:	4290      	cmp	r0, r2
 8001448:	d103      	bne.n	8001452 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800144a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800144c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001450:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001452:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001458:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800145a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800145c:	688b      	ldr	r3, [r1, #8]
 800145e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001460:	680b      	ldr	r3, [r1, #0]
 8001462:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <TIM_Base_SetConfig+0x6c>)
 8001466:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001468:	bf04      	itt	eq
 800146a:	690b      	ldreq	r3, [r1, #16]
 800146c:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800146e:	2301      	movs	r3, #1
 8001470:	6143      	str	r3, [r0, #20]
}
 8001472:	4770      	bx	lr
 8001474:	40012c00 	.word	0x40012c00

08001478 <HAL_TIM_Base_Init>:
{
 8001478:	b510      	push	{r4, lr}
  if(htim == NULL)
 800147a:	4604      	mov	r4, r0
 800147c:	b1a0      	cbz	r0, 80014a8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800147e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001482:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001486:	b91b      	cbnz	r3, 8001490 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001488:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800148c:	f7ff ff0a 	bl	80012a4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001490:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001492:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001494:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001498:	1d21      	adds	r1, r4, #4
 800149a:	f7ff ffb5 	bl	8001408 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800149e:	2301      	movs	r3, #1
  return HAL_OK;
 80014a0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80014a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80014a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014a8:	2001      	movs	r0, #1
 80014aa:	e7fc      	b.n	80014a6 <HAL_TIM_Base_Init+0x2e>

080014ac <HAL_TIMEx_CommutationCallback>:
 80014ac:	4770      	bx	lr

080014ae <HAL_TIMEx_BreakCallback>:
 80014ae:	4770      	bx	lr

080014b0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80014b0:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014b2:	f000 fb55 	bl	8001b60 <xTaskGetSchedulerState>
 80014b6:	2801      	cmp	r0, #1
 80014b8:	d003      	beq.n	80014c2 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80014ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80014be:	f000 bc09 	b.w	8001cd4 <xPortSysTickHandler>
}
 80014c2:	bd08      	pop	{r3, pc}

080014c4 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014c8:	f100 0308 	add.w	r3, r0, #8
 80014cc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014ce:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014d2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014d8:	4770      	bx	lr

080014da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80014de:	4770      	bx	lr

080014e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80014e0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014e2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80014e4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014e6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80014ec:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80014ee:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014f0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014f2:	3301      	adds	r3, #1
 80014f4:	6003      	str	r3, [r0, #0]
}
 80014f6:	4770      	bx	lr

080014f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014f8:	680a      	ldr	r2, [r1, #0]
{
 80014fa:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80014fc:	1c53      	adds	r3, r2, #1
 80014fe:	d10a      	bne.n	8001516 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001500:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001506:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001508:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800150a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800150c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800150e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001510:	3301      	adds	r3, #1
 8001512:	6003      	str	r3, [r0, #0]
}
 8001514:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001516:	f100 0308 	add.w	r3, r0, #8
 800151a:	685c      	ldr	r4, [r3, #4]
 800151c:	6825      	ldr	r5, [r4, #0]
 800151e:	4295      	cmp	r5, r2
 8001520:	d8ef      	bhi.n	8001502 <vListInsert+0xa>
 8001522:	4623      	mov	r3, r4
 8001524:	e7f9      	b.n	800151a <vListInsert+0x22>

08001526 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001526:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001528:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800152c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800152e:	6882      	ldr	r2, [r0, #8]
 8001530:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001536:	bf08      	it	eq
 8001538:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800153a:	2200      	movs	r2, #0
 800153c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	3801      	subs	r0, #1
 8001542:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001544:	4770      	bx	lr
	...

08001548 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <prvResetNextTaskUnblockTime+0x1c>)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <prvResetNextTaskUnblockTime+0x20>)
 8001550:	b919      	cbnz	r1, 800155a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001552:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001556:	601a      	str	r2, [r3, #0]
	}
}
 8001558:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800155e:	68d2      	ldr	r2, [r2, #12]
 8001560:	6852      	ldr	r2, [r2, #4]
 8001562:	e7f8      	b.n	8001556 <prvResetNextTaskUnblockTime+0xe>
 8001564:	2000002c 	.word	0x2000002c
 8001568:	20000104 	.word	0x20000104

0800156c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001570:	4e1b      	ldr	r6, [pc, #108]	; (80015e0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001572:	681c      	ldr	r4, [r3, #0]
{
 8001574:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001576:	6830      	ldr	r0, [r6, #0]
{
 8001578:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800157a:	3004      	adds	r0, #4
 800157c:	f7ff ffd3 	bl	8001526 <uxListRemove>
 8001580:	4633      	mov	r3, r6
 8001582:	b940      	cbnz	r0, 8001596 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001584:	2001      	movs	r0, #1
 8001586:	6831      	ldr	r1, [r6, #0]
 8001588:	4e16      	ldr	r6, [pc, #88]	; (80015e4 <prvAddCurrentTaskToDelayedList+0x78>)
 800158a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800158c:	6832      	ldr	r2, [r6, #0]
 800158e:	4088      	lsls	r0, r1
 8001590:	ea22 0200 	bic.w	r2, r2, r0
 8001594:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001596:	1c6a      	adds	r2, r5, #1
 8001598:	d107      	bne.n	80015aa <prvAddCurrentTaskToDelayedList+0x3e>
 800159a:	b137      	cbz	r7, 80015aa <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800159c:	6819      	ldr	r1, [r3, #0]
 800159e:	4812      	ldr	r0, [pc, #72]	; (80015e8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80015a0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80015a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015a6:	f7ff bf9b 	b.w	80014e0 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	1964      	adds	r4, r4, r5
 80015ae:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80015b0:	d307      	bcc.n	80015c2 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <prvAddCurrentTaskToDelayedList+0x80>)
 80015b4:	6810      	ldr	r0, [r2, #0]
 80015b6:	6819      	ldr	r1, [r3, #0]
}
 80015b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015bc:	3104      	adds	r1, #4
 80015be:	f7ff bf9b 	b.w	80014f8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <prvAddCurrentTaskToDelayedList+0x84>)
 80015c4:	6810      	ldr	r0, [r2, #0]
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	3104      	adds	r1, #4
 80015ca:	f7ff ff95 	bl	80014f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <prvAddCurrentTaskToDelayedList+0x88>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80015d4:	bf88      	it	hi
 80015d6:	601c      	strhi	r4, [r3, #0]
}
 80015d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000014c 	.word	0x2000014c
 80015e0:	20000028 	.word	0x20000028
 80015e4:	200000d4 	.word	0x200000d4
 80015e8:	20000124 	.word	0x20000124
 80015ec:	20000030 	.word	0x20000030
 80015f0:	2000002c 	.word	0x2000002c
 80015f4:	20000104 	.word	0x20000104

080015f8 <xTaskCreate>:
	{
 80015f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015fc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001600:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001602:	4650      	mov	r0, sl
	{
 8001604:	460f      	mov	r7, r1
 8001606:	4699      	mov	r9, r3
 8001608:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800160a:	f000 fbfb 	bl	8001e04 <pvPortMalloc>
			if( pxStack != NULL )
 800160e:	4605      	mov	r5, r0
 8001610:	2800      	cmp	r0, #0
 8001612:	f000 8097 	beq.w	8001744 <xTaskCreate+0x14c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001616:	2064      	movs	r0, #100	; 0x64
 8001618:	f000 fbf4 	bl	8001e04 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800161c:	4604      	mov	r4, r0
 800161e:	2800      	cmp	r0, #0
 8001620:	f000 808d 	beq.w	800173e <xTaskCreate+0x146>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001624:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001628:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800162a:	4455      	add	r5, sl
 800162c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800162e:	f025 0a07 	bic.w	sl, r5, #7
 8001632:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001636:	371d      	adds	r7, #29
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001638:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800163c:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001640:	7819      	ldrb	r1, [r3, #0]
 8001642:	b109      	cbz	r1, 8001648 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001644:	429f      	cmp	r7, r3
 8001646:	d1f7      	bne.n	8001638 <xTaskCreate+0x40>
 8001648:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800164a:	f04f 0b00 	mov.w	fp, #0
 800164e:	2d06      	cmp	r5, #6
 8001650:	bf28      	it	cs
 8001652:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001654:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001656:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8001658:	e9c4 5b15 	strd	r5, fp, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800165c:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800165e:	f884 b051 	strb.w	fp, [r4, #81]	; 0x51
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001662:	f7ff ff3a 	bl	80014da <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001666:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800166a:	f104 0018 	add.w	r0, r4, #24
 800166e:	f7ff ff34 	bl	80014da <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001672:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001676:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001678:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800167a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800167c:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001680:	464a      	mov	r2, r9
 8001682:	4641      	mov	r1, r8
 8001684:	4650      	mov	r0, sl
 8001686:	f000 faa3 	bl	8001bd0 <pxPortInitialiseStack>
 800168a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800168c:	b106      	cbz	r6, 8001690 <xTaskCreate+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800168e:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001690:	f000 fac8 	bl	8001c24 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001696:	4e33      	ldr	r6, [pc, #204]	; (8001764 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001790 <xTaskCreate+0x198>
 800169e:	3201      	adds	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80016a2:	6835      	ldr	r5, [r6, #0]
 80016a4:	2d00      	cmp	r5, #0
 80016a6:	d150      	bne.n	800174a <xTaskCreate+0x152>
			pxCurrentTCB = pxNewTCB;
 80016a8:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d11f      	bne.n	80016f0 <xTaskCreate+0xf8>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80016b0:	f04f 0914 	mov.w	r9, #20
 80016b4:	fb09 8005 	mla	r0, r9, r5, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016b8:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80016ba:	f7ff ff03 	bl	80014c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016be:	2d07      	cmp	r5, #7
 80016c0:	d1f8      	bne.n	80016b4 <xTaskCreate+0xbc>
	vListInitialise( &xDelayedTaskList1 );
 80016c2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001794 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80016c6:	4d28      	ldr	r5, [pc, #160]	; (8001768 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80016c8:	4648      	mov	r0, r9
 80016ca:	f7ff fefb 	bl	80014c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80016ce:	4628      	mov	r0, r5
 80016d0:	f7ff fef8 	bl	80014c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80016d4:	4825      	ldr	r0, [pc, #148]	; (800176c <xTaskCreate+0x174>)
 80016d6:	f7ff fef5 	bl	80014c4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80016da:	4825      	ldr	r0, [pc, #148]	; (8001770 <xTaskCreate+0x178>)
 80016dc:	f7ff fef2 	bl	80014c4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80016e0:	4824      	ldr	r0, [pc, #144]	; (8001774 <xTaskCreate+0x17c>)
 80016e2:	f7ff feef 	bl	80014c4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <xTaskCreate+0x180>)
 80016e8:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80016ec:	4b23      	ldr	r3, [pc, #140]	; (800177c <xTaskCreate+0x184>)
 80016ee:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80016f0:	2501      	movs	r5, #1
		uxTaskNumber++;
 80016f2:	4a23      	ldr	r2, [pc, #140]	; (8001780 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80016f4:	4923      	ldr	r1, [pc, #140]	; (8001784 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80016f6:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80016f8:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80016fa:	3301      	adds	r3, #1
 80016fc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80016fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001700:	fa05 f302 	lsl.w	r3, r5, r2
 8001704:	4303      	orrs	r3, r0
 8001706:	2014      	movs	r0, #20
 8001708:	600b      	str	r3, [r1, #0]
 800170a:	fb00 8002 	mla	r0, r0, r2, r8
 800170e:	4639      	mov	r1, r7
 8001710:	f7ff fee6 	bl	80014e0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001714:	f000 faa8 	bl	8001c68 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <xTaskCreate+0x190>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	b163      	cbz	r3, 8001738 <xTaskCreate+0x140>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800171e:	6833      	ldr	r3, [r6, #0]
 8001720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001722:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <xTaskCreate+0x140>
			taskYIELD_IF_USING_PREEMPTION();
 8001728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <xTaskCreate+0x194>)
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	f3bf 8f6f 	isb	sy
	}
 8001738:	4628      	mov	r0, r5
 800173a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800173e:	4628      	mov	r0, r5
 8001740:	f000 fbec 	bl	8001f1c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001744:	f04f 35ff 	mov.w	r5, #4294967295
 8001748:	e7f6      	b.n	8001738 <xTaskCreate+0x140>
			if( xSchedulerRunning == pdFALSE )
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <xTaskCreate+0x190>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ce      	bne.n	80016f0 <xTaskCreate+0xf8>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001752:	6833      	ldr	r3, [r6, #0]
 8001754:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800175a:	bf28      	it	cs
 800175c:	6034      	strcs	r4, [r6, #0]
 800175e:	e7c7      	b.n	80016f0 <xTaskCreate+0xf8>
 8001760:	200000c0 	.word	0x200000c0
 8001764:	20000028 	.word	0x20000028
 8001768:	200000ec 	.word	0x200000ec
 800176c:	2000010c 	.word	0x2000010c
 8001770:	20000138 	.word	0x20000138
 8001774:	20000124 	.word	0x20000124
 8001778:	2000002c 	.word	0x2000002c
 800177c:	20000030 	.word	0x20000030
 8001780:	200000d0 	.word	0x200000d0
 8001784:	200000d4 	.word	0x200000d4
 8001788:	20000120 	.word	0x20000120
 800178c:	e000ed04 	.word	0xe000ed04
 8001790:	20000034 	.word	0x20000034
 8001794:	200000d8 	.word	0x200000d8

08001798 <vTaskStartScheduler>:
{
 8001798:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800179a:	2400      	movs	r4, #0
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <vTaskStartScheduler+0x60>)
 800179e:	9400      	str	r4, [sp, #0]
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	4623      	mov	r3, r4
 80017a6:	4915      	ldr	r1, [pc, #84]	; (80017fc <vTaskStartScheduler+0x64>)
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <vTaskStartScheduler+0x68>)
 80017aa:	f7ff ff25 	bl	80015f8 <xTaskCreate>
	if( xReturn == pdPASS )
 80017ae:	2801      	cmp	r0, #1
 80017b0:	d114      	bne.n	80017dc <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80017c2:	f04f 32ff 	mov.w	r2, #4294967295
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <vTaskStartScheduler+0x6c>)
 80017c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <vTaskStartScheduler+0x70>)
 80017cc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <vTaskStartScheduler+0x74>)
 80017d0:	601c      	str	r4, [r3, #0]
}
 80017d2:	b002      	add	sp, #8
 80017d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80017d8:	f000 baa6 	b.w	8001d28 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80017dc:	3001      	adds	r0, #1
 80017de:	d108      	bne.n	80017f2 <vTaskStartScheduler+0x5a>
 80017e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e4:	f383 8811 	msr	BASEPRI, r3
 80017e8:	f3bf 8f6f 	isb	sy
 80017ec:	f3bf 8f4f 	dsb	sy
 80017f0:	e7fe      	b.n	80017f0 <vTaskStartScheduler+0x58>
}
 80017f2:	b002      	add	sp, #8
 80017f4:	bd10      	pop	{r4, pc}
 80017f6:	bf00      	nop
 80017f8:	20000100 	.word	0x20000100
 80017fc:	08002a9c 	.word	0x08002a9c
 8001800:	08001a79 	.word	0x08001a79
 8001804:	20000104 	.word	0x20000104
 8001808:	20000120 	.word	0x20000120
 800180c:	2000014c 	.word	0x2000014c

08001810 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001810:	4a02      	ldr	r2, [pc, #8]	; (800181c <vTaskSuspendAll+0xc>)
 8001812:	6813      	ldr	r3, [r2, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200000cc 	.word	0x200000cc

08001820 <xTaskIncrementTick>:
{
 8001820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001824:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <xTaskIncrementTick+0xf8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d16e      	bne.n	800190a <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + 1;
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <xTaskIncrementTick+0xfc>)
 800182e:	681c      	ldr	r4, [r3, #0]
 8001830:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001832:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001834:	b9bc      	cbnz	r4, 8001866 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001836:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <xTaskIncrementTick+0x100>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	b142      	cbz	r2, 8001850 <xTaskIncrementTick+0x30>
 800183e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001842:	f383 8811 	msr	BASEPRI, r3
 8001846:	f3bf 8f6f 	isb	sy
 800184a:	f3bf 8f4f 	dsb	sy
 800184e:	e7fe      	b.n	800184e <xTaskIncrementTick+0x2e>
 8001850:	4a34      	ldr	r2, [pc, #208]	; (8001924 <xTaskIncrementTick+0x104>)
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	6810      	ldr	r0, [r2, #0]
 8001856:	6018      	str	r0, [r3, #0]
 8001858:	6011      	str	r1, [r2, #0]
 800185a:	4a33      	ldr	r2, [pc, #204]	; (8001928 <xTaskIncrementTick+0x108>)
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	f7ff fe71 	bl	8001548 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001866:	4d31      	ldr	r5, [pc, #196]	; (800192c <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8001868:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	4f30      	ldr	r7, [pc, #192]	; (8001930 <xTaskIncrementTick+0x110>)
 8001870:	42a3      	cmp	r3, r4
 8001872:	d911      	bls.n	8001898 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <xTaskIncrementTick+0x114>)
 8001878:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800187a:	2214      	movs	r2, #20
 800187c:	434a      	muls	r2, r1
 800187e:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001880:	2a02      	cmp	r2, #2
 8001882:	bf28      	it	cs
 8001884:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001888:	4a2b      	ldr	r2, [pc, #172]	; (8001938 <xTaskIncrementTick+0x118>)
 800188a:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800188c:	2a00      	cmp	r2, #0
}
 800188e:	bf0c      	ite	eq
 8001890:	4658      	moveq	r0, fp
 8001892:	2001      	movne	r0, #1
 8001894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001898:	f8df a084 	ldr.w	sl, [pc, #132]	; 8001920 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800189c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001940 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018a0:	f8da 2000 	ldr.w	r2, [sl]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	b91a      	cbnz	r2, 80018b0 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	602a      	str	r2, [r5, #0]
					break;
 80018ae:	e7e1      	b.n	8001874 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80018b0:	f8da 2000 	ldr.w	r2, [sl]
 80018b4:	68d2      	ldr	r2, [r2, #12]
 80018b6:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80018b8:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80018ba:	428c      	cmp	r4, r1
 80018bc:	d201      	bcs.n	80018c2 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 80018be:	6029      	str	r1, [r5, #0]
						break;
 80018c0:	e7d8      	b.n	8001874 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018c2:	f106 0804 	add.w	r8, r6, #4
 80018c6:	4640      	mov	r0, r8
 80018c8:	f7ff fe2d 	bl	8001526 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018cc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80018ce:	b119      	cbz	r1, 80018d8 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018d0:	f106 0018 	add.w	r0, r6, #24
 80018d4:	f7ff fe27 	bl	8001526 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80018d8:	2201      	movs	r2, #1
 80018da:	f04f 0c14 	mov.w	ip, #20
 80018de:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80018e0:	f8d9 3000 	ldr.w	r3, [r9]
 80018e4:	fa02 f100 	lsl.w	r1, r2, r0
 80018e8:	4319      	orrs	r1, r3
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <xTaskIncrementTick+0x114>)
 80018ec:	f8c9 1000 	str.w	r1, [r9]
 80018f0:	fb0c 3000 	mla	r0, ip, r0, r3
 80018f4:	4641      	mov	r1, r8
 80018f6:	f7ff fdf3 	bl	80014e0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018fa:	6838      	ldr	r0, [r7, #0]
 80018fc:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80018fe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001900:	4291      	cmp	r1, r2
 8001902:	bf28      	it	cs
 8001904:	f04f 0b01 	movcs.w	fp, #1
 8001908:	e7ca      	b.n	80018a0 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800190c:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8001910:	6813      	ldr	r3, [r2, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e7b7      	b.n	8001888 <xTaskIncrementTick+0x68>
 8001918:	200000cc 	.word	0x200000cc
 800191c:	2000014c 	.word	0x2000014c
 8001920:	2000002c 	.word	0x2000002c
 8001924:	20000030 	.word	0x20000030
 8001928:	20000108 	.word	0x20000108
 800192c:	20000104 	.word	0x20000104
 8001930:	20000028 	.word	0x20000028
 8001934:	20000034 	.word	0x20000034
 8001938:	20000150 	.word	0x20000150
 800193c:	200000c8 	.word	0x200000c8
 8001940:	200000d4 	.word	0x200000d4

08001944 <xTaskResumeAll>:
{
 8001944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001948:	4c30      	ldr	r4, [pc, #192]	; (8001a0c <xTaskResumeAll+0xc8>)
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	b943      	cbnz	r3, 8001960 <xTaskResumeAll+0x1c>
 800194e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001952:	f383 8811 	msr	BASEPRI, r3
 8001956:	f3bf 8f6f 	isb	sy
 800195a:	f3bf 8f4f 	dsb	sy
 800195e:	e7fe      	b.n	800195e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001960:	f000 f960 	bl	8001c24 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	3b01      	subs	r3, #1
 8001968:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800196a:	6824      	ldr	r4, [r4, #0]
 800196c:	b12c      	cbz	r4, 800197a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800196e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001970:	f000 f97a 	bl	8001c68 <vPortExitCritical>
}
 8001974:	4620      	mov	r0, r4
 8001976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <xTaskResumeAll+0xcc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f5      	beq.n	800196e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001982:	4d24      	ldr	r5, [pc, #144]	; (8001a14 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8001984:	4e24      	ldr	r6, [pc, #144]	; (8001a18 <xTaskResumeAll+0xd4>)
 8001986:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001a2c <xTaskResumeAll+0xe8>
 800198a:	e01f      	b.n	80019cc <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800198c:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 800198e:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001990:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001992:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001996:	f104 0018 	add.w	r0, r4, #24
 800199a:	f7ff fdc4 	bl	8001526 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800199e:	4648      	mov	r0, r9
 80019a0:	f7ff fdc1 	bl	8001526 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80019a4:	2014      	movs	r0, #20
 80019a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019a8:	6831      	ldr	r1, [r6, #0]
 80019aa:	fa07 f302 	lsl.w	r3, r7, r2
 80019ae:	430b      	orrs	r3, r1
 80019b0:	fb00 8002 	mla	r0, r0, r2, r8
 80019b4:	4649      	mov	r1, r9
 80019b6:	6033      	str	r3, [r6, #0]
 80019b8:	f7ff fd92 	bl	80014e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <xTaskResumeAll+0xd8>)
 80019be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d301      	bcc.n	80019cc <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <xTaskResumeAll+0xdc>)
 80019ca:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019cc:	682b      	ldr	r3, [r5, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1dc      	bne.n	800198c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80019d2:	b10c      	cbz	r4, 80019d8 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80019d4:	f7ff fdb8 	bl	8001548 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80019d8:	4d12      	ldr	r5, [pc, #72]	; (8001a24 <xTaskResumeAll+0xe0>)
 80019da:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80019dc:	b144      	cbz	r4, 80019f0 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 80019de:	2701      	movs	r7, #1
 80019e0:	4e0f      	ldr	r6, [pc, #60]	; (8001a20 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80019e2:	f7ff ff1d 	bl	8001820 <xTaskIncrementTick>
 80019e6:	b100      	cbz	r0, 80019ea <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80019e8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80019ea:	3c01      	subs	r4, #1
 80019ec:	d1f9      	bne.n	80019e2 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80019ee:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <xTaskResumeAll+0xdc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ba      	beq.n	800196e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80019f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <xTaskResumeAll+0xe4>)
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f3bf 8f4f 	dsb	sy
 8001a04:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001a08:	2401      	movs	r4, #1
 8001a0a:	e7b1      	b.n	8001970 <xTaskResumeAll+0x2c>
 8001a0c:	200000cc 	.word	0x200000cc
 8001a10:	200000c0 	.word	0x200000c0
 8001a14:	2000010c 	.word	0x2000010c
 8001a18:	200000d4 	.word	0x200000d4
 8001a1c:	20000028 	.word	0x20000028
 8001a20:	20000150 	.word	0x20000150
 8001a24:	200000c8 	.word	0x200000c8
 8001a28:	e000ed04 	.word	0xe000ed04
 8001a2c:	20000034 	.word	0x20000034

08001a30 <vTaskDelay>:
	{
 8001a30:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001a32:	b940      	cbnz	r0, 8001a46 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <vTaskDelay+0x40>)
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	f3bf 8f6f 	isb	sy
	}
 8001a44:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <vTaskDelay+0x44>)
 8001a48:	6819      	ldr	r1, [r3, #0]
 8001a4a:	b141      	cbz	r1, 8001a5e <vTaskDelay+0x2e>
 8001a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a50:	f383 8811 	msr	BASEPRI, r3
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	f3bf 8f4f 	dsb	sy
 8001a5c:	e7fe      	b.n	8001a5c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001a5e:	f7ff fed7 	bl	8001810 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001a62:	f7ff fd83 	bl	800156c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001a66:	f7ff ff6d 	bl	8001944 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d0e2      	beq.n	8001a34 <vTaskDelay+0x4>
 8001a6e:	e7e9      	b.n	8001a44 <vTaskDelay+0x14>
 8001a70:	e000ed04 	.word	0xe000ed04
 8001a74:	200000cc 	.word	0x200000cc

08001a78 <prvIdleTask>:
{
 8001a78:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001a7a:	4e17      	ldr	r6, [pc, #92]	; (8001ad8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a7c:	4c17      	ldr	r4, [pc, #92]	; (8001adc <prvIdleTask+0x64>)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	b963      	cbnz	r3, 8001a9c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <prvIdleTask+0x68>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d9f8      	bls.n	8001a7c <prvIdleTask+0x4>
				taskYIELD();
 8001a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <prvIdleTask+0x6c>)
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	f3bf 8f4f 	dsb	sy
 8001a96:	f3bf 8f6f 	isb	sy
 8001a9a:	e7ef      	b.n	8001a7c <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001a9c:	f7ff feb8 	bl	8001810 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001aa0:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001aa2:	f7ff ff4f 	bl	8001944 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001aa6:	2d00      	cmp	r5, #0
 8001aa8:	d0e9      	beq.n	8001a7e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001aaa:	f000 f8bb 	bl	8001c24 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001aae:	68f3      	ldr	r3, [r6, #12]
 8001ab0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ab2:	1d28      	adds	r0, r5, #4
 8001ab4:	f7ff fd37 	bl	8001526 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <prvIdleTask+0x70>)
 8001aba:	6813      	ldr	r3, [r2, #0]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001ac6:	f000 f8cf 	bl	8001c68 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001aca:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001acc:	f000 fa26 	bl	8001f1c <vPortFree>
			vPortFree( pxTCB );
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f000 fa23 	bl	8001f1c <vPortFree>
 8001ad6:	e7d2      	b.n	8001a7e <prvIdleTask+0x6>
 8001ad8:	20000138 	.word	0x20000138
 8001adc:	200000c4 	.word	0x200000c4
 8001ae0:	20000034 	.word	0x20000034
 8001ae4:	e000ed04 	.word	0xe000ed04
 8001ae8:	200000c0 	.word	0x200000c0

08001aec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <vTaskSwitchContext+0x60>)
{
 8001aee:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <vTaskSwitchContext+0x64>)
 8001af4:	b112      	cbz	r2, 8001afc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001af6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001af8:	601a      	str	r2, [r3, #0]
}
 8001afa:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001afc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <vTaskSwitchContext+0x68>)
 8001b00:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	2214      	movs	r2, #20
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f1c3 031f 	rsb	r3, r3, #31
 8001b0e:	435a      	muls	r2, r3
 8001b10:	4911      	ldr	r1, [pc, #68]	; (8001b58 <vTaskSwitchContext+0x6c>)
 8001b12:	588c      	ldr	r4, [r1, r2]
 8001b14:	1888      	adds	r0, r1, r2
 8001b16:	b944      	cbnz	r4, 8001b2a <vTaskSwitchContext+0x3e>
	__asm volatile
 8001b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1c:	f383 8811 	msr	BASEPRI, r3
 8001b20:	f3bf 8f6f 	isb	sy
 8001b24:	f3bf 8f4f 	dsb	sy
 8001b28:	e7fe      	b.n	8001b28 <vTaskSwitchContext+0x3c>
 8001b2a:	6844      	ldr	r4, [r0, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	6864      	ldr	r4, [r4, #4]
 8001b30:	440a      	add	r2, r1
 8001b32:	4294      	cmp	r4, r2
 8001b34:	bf08      	it	eq
 8001b36:	6862      	ldreq	r2, [r4, #4]
 8001b38:	6044      	str	r4, [r0, #4]
 8001b3a:	bf08      	it	eq
 8001b3c:	6042      	streq	r2, [r0, #4]
 8001b3e:	2214      	movs	r2, #20
 8001b40:	fb02 1303 	mla	r3, r2, r3, r1
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <vTaskSwitchContext+0x70>)
 8001b4a:	e7d5      	b.n	8001af8 <vTaskSwitchContext+0xc>
 8001b4c:	200000cc 	.word	0x200000cc
 8001b50:	20000150 	.word	0x20000150
 8001b54:	200000d4 	.word	0x200000d4
 8001b58:	20000034 	.word	0x20000034
 8001b5c:	20000028 	.word	0x20000028

08001b60 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <xTaskGetSchedulerState+0x18>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b133      	cbz	r3, 8001b74 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <xTaskGetSchedulerState+0x1c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2002      	moveq	r0, #2
 8001b70:	2000      	movne	r0, #0
 8001b72:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001b74:	2001      	movs	r0, #1
	}
 8001b76:	4770      	bx	lr
 8001b78:	20000120 	.word	0x20000120
 8001b7c:	200000cc 	.word	0x200000cc

08001b80 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <prvTaskExitError+0x2c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	d008      	beq.n	8001b9a <prvTaskExitError+0x1a>
 8001b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8c:	f383 8811 	msr	BASEPRI, r3
 8001b90:	f3bf 8f6f 	isb	sy
 8001b94:	f3bf 8f4f 	dsb	sy
 8001b98:	e7fe      	b.n	8001b98 <prvTaskExitError+0x18>
 8001b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9e:	f383 8811 	msr	BASEPRI, r3
 8001ba2:	f3bf 8f6f 	isb	sy
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	e7fe      	b.n	8001baa <prvTaskExitError+0x2a>
 8001bac:	20000004 	.word	0x20000004

08001bb0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <prvPortStartFirstTask+0x1c>)
 8001bb2:	6800      	ldr	r0, [r0, #0]
 8001bb4:	6800      	ldr	r0, [r0, #0]
 8001bb6:	f380 8808 	msr	MSP, r0
 8001bba:	b662      	cpsie	i
 8001bbc:	b661      	cpsie	f
 8001bbe:	f3bf 8f4f 	dsb	sy
 8001bc2:	f3bf 8f6f 	isb	sy
 8001bc6:	df00      	svc	0
 8001bc8:	bf00      	nop
 8001bca:	0000      	.short	0x0000
 8001bcc:	e000ed08 	.word	0xe000ed08

08001bd0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bd4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001bda:	f021 0101 	bic.w	r1, r1, #1
 8001bde:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001be2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001be6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8001bea:	3840      	subs	r0, #64	; 0x40
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	08001b81 	.word	0x08001b81
	...

08001c00 <SVC_Handler>:
	__asm volatile (
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <pxCurrentTCBConst2>)
 8001c02:	6819      	ldr	r1, [r3, #0]
 8001c04:	6808      	ldr	r0, [r1, #0]
 8001c06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c0a:	f380 8809 	msr	PSP, r0
 8001c0e:	f3bf 8f6f 	isb	sy
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	f380 8811 	msr	BASEPRI, r0
 8001c1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001c1e:	4770      	bx	lr

08001c20 <pxCurrentTCBConst2>:
 8001c20:	20000028 	.word	0x20000028

08001c24 <vPortEnterCritical>:
 8001c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c28:	f383 8811 	msr	BASEPRI, r3
 8001c2c:	f3bf 8f6f 	isb	sy
 8001c30:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <vPortEnterCritical+0x3c>)
 8001c36:	6813      	ldr	r3, [r2, #0]
 8001c38:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001c3a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001c3c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001c3e:	d10d      	bne.n	8001c5c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <vPortEnterCritical+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001c48:	d008      	beq.n	8001c5c <vPortEnterCritical+0x38>
 8001c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4e:	f383 8811 	msr	BASEPRI, r3
 8001c52:	f3bf 8f6f 	isb	sy
 8001c56:	f3bf 8f4f 	dsb	sy
 8001c5a:	e7fe      	b.n	8001c5a <vPortEnterCritical+0x36>
	}
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000004 	.word	0x20000004
 8001c64:	e000ed04 	.word	0xe000ed04

08001c68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001c68:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <vPortExitCritical+0x24>)
 8001c6a:	6813      	ldr	r3, [r2, #0]
 8001c6c:	b943      	cbnz	r3, 8001c80 <vPortExitCritical+0x18>
 8001c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c72:	f383 8811 	msr	BASEPRI, r3
 8001c76:	f3bf 8f6f 	isb	sy
 8001c7a:	f3bf 8f4f 	dsb	sy
 8001c7e:	e7fe      	b.n	8001c7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001c80:	3b01      	subs	r3, #1
 8001c82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001c84:	b90b      	cbnz	r3, 8001c8a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c86:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001c8a:	4770      	bx	lr
 8001c8c:	20000004 	.word	0x20000004

08001c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001c90:	f3ef 8009 	mrs	r0, PSP
 8001c94:	f3bf 8f6f 	isb	sy
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <pxCurrentTCBConst>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ca0:	6010      	str	r0, [r2, #0]
 8001ca2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001ca6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001caa:	f380 8811 	msr	BASEPRI, r0
 8001cae:	f7ff ff1d 	bl	8001aec <vTaskSwitchContext>
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f380 8811 	msr	BASEPRI, r0
 8001cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001cbe:	6819      	ldr	r1, [r3, #0]
 8001cc0:	6808      	ldr	r0, [r1, #0]
 8001cc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001cc6:	f380 8809 	msr	PSP, r0
 8001cca:	f3bf 8f6f 	isb	sy
 8001cce:	4770      	bx	lr

08001cd0 <pxCurrentTCBConst>:
 8001cd0:	20000028 	.word	0x20000028

08001cd4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001cd4:	b508      	push	{r3, lr}
	__asm volatile
 8001cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001ce6:	f7ff fd9b 	bl	8001820 <xTaskIncrementTick>
 8001cea:	b118      	cbz	r0, 8001cf4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cf0:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <xPortSysTickHandler+0x28>)
 8001cf2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001cfa:	bd08      	pop	{r3, pc}
 8001cfc:	e000ed04 	.word	0xe000ed04

08001d00 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <vPortSetupTimerInterrupt+0x1c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <vPortSetupTimerInterrupt+0x20>)
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001d12:	2207      	movs	r2, #7
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <vPortSetupTimerInterrupt+0x24>)
 8001d16:	601a      	str	r2, [r3, #0]
}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	e000e014 	.word	0xe000e014
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <xPortStartScheduler>:
{
 8001d28:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d2c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001d34:	22ff      	movs	r2, #255	; 0xff
 8001d36:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001d38:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001d3a:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001d42:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001d46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d4a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <xPortStartScheduler+0x88>)
 8001d50:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d52:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001d56:	1e54      	subs	r4, r2, #1
 8001d58:	0600      	lsls	r0, r0, #24
 8001d5a:	d41c      	bmi.n	8001d96 <xPortStartScheduler+0x6e>
 8001d5c:	b101      	cbz	r1, 8001d60 <xPortStartScheduler+0x38>
 8001d5e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001d64:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001d68:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001d6a:	9b01      	ldr	r3, [sp, #4]
 8001d6c:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <xPortStartScheduler+0x80>)
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <xPortStartScheduler+0x8c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001d7a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001d82:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001d84:	f7ff ffbc 	bl	8001d00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <xPortStartScheduler+0x90>)
 8001d8c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 8001d8e:	f7ff ff0f 	bl	8001bb0 <prvPortStartFirstTask>
	prvTaskExitError();
 8001d92:	f7ff fef5 	bl	8001b80 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001d96:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	0052      	lsls	r2, r2, #1
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f88d 2003 	strb.w	r2, [sp, #3]
 8001da4:	4622      	mov	r2, r4
 8001da6:	e7d4      	b.n	8001d52 <xPortStartScheduler+0x2a>
 8001da8:	e000e400 	.word	0xe000e400
 8001dac:	20000154 	.word	0x20000154
 8001db0:	20000158 	.word	0x20000158
 8001db4:	e000ed20 	.word	0xe000ed20
 8001db8:	20000004 	.word	0x20000004

08001dbc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001dbc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <prvInsertBlockIntoFreeList+0x40>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4282      	cmp	r2, r0
 8001dc4:	d318      	bcc.n	8001df8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001dc6:	685c      	ldr	r4, [r3, #4]
 8001dc8:	1919      	adds	r1, r3, r4
 8001dca:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001dcc:	bf01      	itttt	eq
 8001dce:	6841      	ldreq	r1, [r0, #4]
 8001dd0:	4618      	moveq	r0, r3
 8001dd2:	1909      	addeq	r1, r1, r4
 8001dd4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001dd6:	6844      	ldr	r4, [r0, #4]
 8001dd8:	1901      	adds	r1, r0, r4
 8001dda:	428a      	cmp	r2, r1
 8001ddc:	d107      	bne.n	8001dee <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <prvInsertBlockIntoFreeList+0x44>)
 8001de0:	6809      	ldr	r1, [r1, #0]
 8001de2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001de4:	bf1f      	itttt	ne
 8001de6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001de8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001dea:	1909      	addne	r1, r1, r4
 8001dec:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001dee:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001df0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001df2:	bf18      	it	ne
 8001df4:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001df6:	bd10      	pop	{r4, pc}
 8001df8:	4613      	mov	r3, r2
 8001dfa:	e7e1      	b.n	8001dc0 <prvInsertBlockIntoFreeList+0x4>
 8001dfc:	20000d6c 	.word	0x20000d6c
 8001e00:	2000015c 	.word	0x2000015c

08001e04 <pvPortMalloc>:
{
 8001e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e08:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001e0a:	f7ff fd01 	bl	8001810 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001e0e:	493d      	ldr	r1, [pc, #244]	; (8001f04 <pvPortMalloc+0x100>)
 8001e10:	4d3d      	ldr	r5, [pc, #244]	; (8001f08 <pvPortMalloc+0x104>)
 8001e12:	680b      	ldr	r3, [r1, #0]
 8001e14:	b9fb      	cbnz	r3, 8001e56 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8001e16:	4a3d      	ldr	r2, [pc, #244]	; (8001f0c <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8001e18:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e1a:	0756      	lsls	r6, r2, #29
 8001e1c:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e20:	bf0f      	iteee	eq
 8001e22:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e26:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e28:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e2c:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e2e:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e30:	4e37      	ldr	r6, [pc, #220]	; (8001f10 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 8001e32:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e34:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8001e38:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e3a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8001e3c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e40:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8001e42:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e44:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e48:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <pvPortMalloc+0x110>)
 8001e4a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e4c:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <pvPortMalloc+0x114>)
 8001e4e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001e50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e54:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001e56:	682f      	ldr	r7, [r5, #0]
 8001e58:	4227      	tst	r7, r4
 8001e5a:	d14d      	bne.n	8001ef8 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d03e      	beq.n	8001ede <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8001e60:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e64:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001e66:	bf1c      	itt	ne
 8001e68:	f023 0307 	bicne.w	r3, r3, #7
 8001e6c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d042      	beq.n	8001ef8 <pvPortMalloc+0xf4>
 8001e72:	4a29      	ldr	r2, [pc, #164]	; (8001f18 <pvPortMalloc+0x114>)
 8001e74:	6816      	ldr	r6, [r2, #0]
 8001e76:	4690      	mov	r8, r2
 8001e78:	429e      	cmp	r6, r3
 8001e7a:	d33d      	bcc.n	8001ef8 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 8001e7c:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <pvPortMalloc+0x10c>)
 8001e7e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e80:	6868      	ldr	r0, [r5, #4]
 8001e82:	4298      	cmp	r0, r3
 8001e84:	d201      	bcs.n	8001e8a <pvPortMalloc+0x86>
 8001e86:	682c      	ldr	r4, [r5, #0]
 8001e88:	b9a4      	cbnz	r4, 8001eb4 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8001e8a:	6809      	ldr	r1, [r1, #0]
 8001e8c:	42a9      	cmp	r1, r5
 8001e8e:	d033      	beq.n	8001ef8 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e90:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e92:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e94:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e96:	1ac2      	subs	r2, r0, r3
 8001e98:	2a10      	cmp	r2, #16
 8001e9a:	d912      	bls.n	8001ec2 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001e9c:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e9e:	0741      	lsls	r1, r0, #29
 8001ea0:	d00b      	beq.n	8001eba <pvPortMalloc+0xb6>
	__asm volatile
 8001ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea6:	f383 8811 	msr	BASEPRI, r3
 8001eaa:	f3bf 8f6f 	isb	sy
 8001eae:	f3bf 8f4f 	dsb	sy
 8001eb2:	e7fe      	b.n	8001eb2 <pvPortMalloc+0xae>
 8001eb4:	462a      	mov	r2, r5
 8001eb6:	4625      	mov	r5, r4
 8001eb8:	e7e2      	b.n	8001e80 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001eba:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001ebc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001ebe:	f7ff ff7d 	bl	8001dbc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ec2:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ec4:	4913      	ldr	r1, [pc, #76]	; (8001f14 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ec6:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001ec8:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8001eca:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ecc:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ece:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ed2:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001ed4:	bf38      	it	cc
 8001ed6:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001ed8:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001eda:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001edc:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001ede:	f7ff fd31 	bl	8001944 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ee2:	0763      	lsls	r3, r4, #29
 8001ee4:	d00a      	beq.n	8001efc <pvPortMalloc+0xf8>
 8001ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eea:	f383 8811 	msr	BASEPRI, r3
 8001eee:	f3bf 8f6f 	isb	sy
 8001ef2:	f3bf 8f4f 	dsb	sy
 8001ef6:	e7fe      	b.n	8001ef6 <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 8001ef8:	2400      	movs	r4, #0
 8001efa:	e7f0      	b.n	8001ede <pvPortMalloc+0xda>
}
 8001efc:	4620      	mov	r0, r4
 8001efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f02:	bf00      	nop
 8001f04:	2000015c 	.word	0x2000015c
 8001f08:	20000d60 	.word	0x20000d60
 8001f0c:	20000160 	.word	0x20000160
 8001f10:	20000d6c 	.word	0x20000d6c
 8001f14:	20000d68 	.word	0x20000d68
 8001f18:	20000d64 	.word	0x20000d64

08001f1c <vPortFree>:
{
 8001f1c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001f1e:	4604      	mov	r4, r0
 8001f20:	b370      	cbz	r0, 8001f80 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001f22:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <vPortFree+0x68>)
 8001f24:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	4213      	tst	r3, r2
 8001f2c:	d108      	bne.n	8001f40 <vPortFree+0x24>
 8001f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f32:	f383 8811 	msr	BASEPRI, r3
 8001f36:	f3bf 8f6f 	isb	sy
 8001f3a:	f3bf 8f4f 	dsb	sy
 8001f3e:	e7fe      	b.n	8001f3e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001f40:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001f44:	b141      	cbz	r1, 8001f58 <vPortFree+0x3c>
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	e7fe      	b.n	8001f56 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001f58:	ea23 0302 	bic.w	r3, r3, r2
 8001f5c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001f60:	f7ff fc56 	bl	8001810 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001f64:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <vPortFree+0x6c>)
 8001f66:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001f6a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001f6c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001f70:	440b      	add	r3, r1
 8001f72:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001f74:	f7ff ff22 	bl	8001dbc <prvInsertBlockIntoFreeList>
}
 8001f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001f7c:	f7ff bce2 	b.w	8001944 <xTaskResumeAll>
}
 8001f80:	bd10      	pop	{r4, pc}
 8001f82:	bf00      	nop
 8001f84:	20000d60 	.word	0x20000d60
 8001f88:	20000d64 	.word	0x20000d64

08001f8c <_Z9atraso_usm>:
	asm volatile (  "movw r1, #:lower16:const_us	\n\t"
					"movt r1, #:upper16:const_us	\n\t"		//r1 = fcpu/3000000 (const_us)
					"mul  r0, r0, r1				\n\t"	    //r0 = valor*(fcpu/3000000), c�lculo do n�mero de repeti��es do la�o

					"r_us:	   subs r0, r0, #1		\n\t"
					"bne  r_us						\n\t");		//2 ciclos gastos quando tomado, 1 contr�rio
 8001f8c:	f240 010c 	movw	r1, #12
 8001f90:	f2c0 0100 	movt	r1, #0
 8001f94:	fb00 f001 	mul.w	r0, r0, r1

08001f98 <r_us>:
 8001f98:	3801      	subs	r0, #1
 8001f9a:	d1fd      	bne.n	8001f98 <r_us>
}
 8001f9c:	4770      	bx	lr

08001f9e <_Z15vTask_LCD_PrintPv>:
}

//---------------------------------------------------------------------------------------------------
// Tarefa para atualizar periodicamente o LCD
void vTask_LCD_Print(void *pvParameters)
{
 8001f9e:	b508      	push	{r3, lr}
	while(1) imprime_LCD();
 8001fa0:	f000 fa00 	bl	80023a4 <_Z11imprime_LCDv>
 8001fa4:	e7fc      	b.n	8001fa0 <_Z15vTask_LCD_PrintPv+0x2>
	...

08001fa8 <_Z9prng_LFSRv>:
 */
unsigned long  prng_LFSR() 	// Galois LFSRs, Liner-Feedback Shift Register, (PRNG)
{
	unsigned long lsb;

	if (lfsr==0)		// garantia para que valor nao seja zero
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <_Z9prng_LFSRv+0x20>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	b90a      	cbnz	r2, 8001fb2 <_Z9prng_LFSRv+0xa>
	    lfsr = 1;
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

	lsb = lfsr & 0x00000001;
 8001fb2:	6819      	ldr	r1, [r3, #0]
	lfsr = lfsr >> 1;
 8001fb4:	084a      	lsrs	r2, r1, #1

	if (lsb)
 8001fb6:	07c9      	lsls	r1, r1, #31
	    lfsr = lfsr ^ 0x80000057;	//polinomio retirado de http://users.ece.cmu.edu/~koopman/lfsr/
 8001fb8:	bf44      	itt	mi
 8001fba:	f082 4200 	eormi.w	r2, r2, #2147483648	; 0x80000000
 8001fbe:	f082 0257 	eormi.w	r2, r2, #87	; 0x57
 8001fc2:	601a      	str	r2, [r3, #0]

	return lfsr;
}
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	4770      	bx	lr
 8001fc8:	20000df0 	.word	0x20000df0

08001fcc <_Z14vTask_Nr_PrintPv>:
}
//---------------------------------------------------------------------------------------------------
// Tarefa para imprimir um numero aleatorio
void vTask_Nr_Print(void *pvParameters)
{
 8001fcc:	b508      	push	{r3, lr}

	//desenha_retangulo(&scenery,1);

	while(1)
	{
		rand_prng = prng_LFSR();
 8001fce:	f7ff ffeb 	bl	8001fa8 <_Z9prng_LFSRv>
		//desenha_pixel(40,23,1);
		//desenha_retangulo(&ai,3);
		//desenha_circulo(40,23,3,1);
		//desenha_triangulo(&monster,1);

		print_monster(20,20);
 8001fd2:	2114      	movs	r1, #20
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	f000 fbd3 	bl	8002780 <_Z13print_monstermm>

		print_AI(78,42);
 8001fda:	212a      	movs	r1, #42	; 0x2a
 8001fdc:	204e      	movs	r0, #78	; 0x4e
 8001fde:	f000 fbc1 	bl	8002764 <_Z8print_AImm>

		print_food(40,40);
 8001fe2:	2128      	movs	r1, #40	; 0x28
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	f000 fbb9 	bl	800275c <_Z10print_foodmm>


		vTaskDelay(500);
 8001fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fee:	f7ff fd1f 	bl	8001a30 <vTaskDelay>
 8001ff2:	e7ec      	b.n	8001fce <_Z14vTask_Nr_PrintPv+0x2>

08001ff4 <HAL_ADC_ConvCpltCallback>:
	if(hadc->Instance == ADC1)
 8001ff4:	6802      	ldr	r2, [r0, #0]
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_ADC_ConvCpltCallback+0x18>)
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d105      	bne.n	8002008 <HAL_ADC_ConvCpltCallback+0x14>
		valor_ADC[0]=ADC_buffer[0];
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_ADC_ConvCpltCallback+0x20>)
 8002000:	6811      	ldr	r1, [r2, #0]
		valor_ADC[1]=ADC_buffer[1];
 8002002:	6852      	ldr	r2, [r2, #4]
		valor_ADC[0]=ADC_buffer[0];
 8002004:	6019      	str	r1, [r3, #0]
		valor_ADC[1]=ADC_buffer[1];
 8002006:	605a      	str	r2, [r3, #4]
}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40012400 	.word	0x40012400
 8002010:	20000d74 	.word	0x20000d74
 8002014:	20000df4 	.word	0x20000df4

08002018 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002018:	b530      	push	{r4, r5, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800201a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002020:	2402      	movs	r4, #2
{
 8002022:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002024:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002028:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800202a:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800202e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002032:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002034:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002036:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002038:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203a:	f7fe fe1f 	bl	8000c7c <HAL_RCC_OscConfig>
 800203e:	b100      	cbz	r0, 8002042 <_Z18SystemClock_Configv+0x2a>
 8002040:	e7fe      	b.n	8002040 <_Z18SystemClock_Configv+0x28>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002042:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002046:	250f      	movs	r5, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002048:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204a:	e9cd 3008 	strd	r3, r0, [sp, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800204e:	4621      	mov	r1, r4
 8002050:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002052:	e9cd 5405 	strd	r5, r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002056:	f7fe ffd7 	bl	8001008 <HAL_RCC_ClockConfig>
 800205a:	b100      	cbz	r0, 800205e <_Z18SystemClock_Configv+0x46>
 800205c:	e7fe      	b.n	800205c <_Z18SystemClock_Configv+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800205e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002062:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002064:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002066:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002068:	f7ff f8a4 	bl	80011b4 <HAL_RCCEx_PeriphCLKConfig>
 800206c:	4604      	mov	r4, r0
 800206e:	b100      	cbz	r0, 8002072 <_Z18SystemClock_Configv+0x5a>
 8002070:	e7fe      	b.n	8002070 <_Z18SystemClock_Configv+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002072:	f7ff f86b 	bl	800114c <HAL_RCC_GetHCLKFreq>
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb0 f0f3 	udiv	r0, r0, r3
 800207e:	f7fe fbef 	bl	8000860 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002082:	2004      	movs	r0, #4
 8002084:	f7fe fc02 	bl	800088c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002088:	4622      	mov	r2, r4
 800208a:	4629      	mov	r1, r5
 800208c:	f04f 30ff 	mov.w	r0, #4294967295
 8002090:	f7fe fba6 	bl	80007e0 <HAL_NVIC_SetPriority>
}
 8002094:	b015      	add	sp, #84	; 0x54
 8002096:	bd30      	pop	{r4, r5, pc}

08002098 <main>:
{
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	4c5b      	ldr	r4, [pc, #364]	; (8002208 <main+0x170>)
{
 800209c:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800209e:	f7fe f857 	bl	8000150 <HAL_Init>
  SystemClock_Config();
 80020a2:	f7ff ffb9 	bl	8002018 <_Z18SystemClock_Configv>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	61a3      	str	r3, [r4, #24]
 80020b0:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	9303      	str	r3, [sp, #12]
 80020bc:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020be:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020c0:	4852      	ldr	r0, [pc, #328]	; (800220c <main+0x174>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c2:	f043 0320 	orr.w	r3, r3, #32
 80020c6:	61a3      	str	r3, [r4, #24]
 80020c8:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	9304      	str	r3, [sp, #16]
 80020d2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	61a3      	str	r3, [r4, #24]
 80020de:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e0:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	9305      	str	r3, [sp, #20]
 80020e8:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020ea:	f7fe fdc1 	bl	8000c70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80020ee:	2200      	movs	r2, #0
 80020f0:	21f8      	movs	r1, #248	; 0xf8
 80020f2:	4847      	ldr	r0, [pc, #284]	; (8002210 <main+0x178>)
 80020f4:	f7fe fdbc 	bl	8000c70 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fc:	a906      	add	r1, sp, #24
 80020fe:	4843      	ldr	r0, [pc, #268]	; (800220c <main+0x174>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002100:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002106:	f7fe fcd3 	bl	8000ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210e:	a906      	add	r1, sp, #24
 8002110:	483e      	ldr	r0, [pc, #248]	; (800220c <main+0x174>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002112:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002116:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002118:	f7fe fcca 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800211c:	23f8      	movs	r3, #248	; 0xf8
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	a906      	add	r1, sp, #24
 8002120:	483b      	ldr	r0, [pc, #236]	; (8002210 <main+0x178>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f7fe fcc2 	bl	8000ab0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800212c:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800212e:	4632      	mov	r2, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002130:	432b      	orrs	r3, r5
 8002132:	6163      	str	r3, [r4, #20]
 8002134:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002136:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002138:	402b      	ands	r3, r5
 800213a:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800213c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800213e:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002140:	f7fe fb4e 	bl	80007e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002144:	200b      	movs	r0, #11
 8002146:	f7fe fb7f 	bl	8000848 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 800214a:	4c32      	ldr	r4, [pc, #200]	; (8002214 <main+0x17c>)
 800214c:	4b32      	ldr	r3, [pc, #200]	; (8002218 <main+0x180>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800214e:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8002150:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002152:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002156:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800215a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800215e:	6166      	str	r6, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002160:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002162:	6066      	str	r6, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002164:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002166:	f7fe faa7 	bl	80006b8 <HAL_ADC_Init>
 800216a:	b100      	cbz	r0, 800216e <main+0xd6>
 800216c:	e7fe      	b.n	800216c <main+0xd4>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800216e:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002170:	a906      	add	r1, sp, #24
 8002172:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002174:	e9cd 5506 	strd	r5, r5, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002178:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800217a:	f7fe f8d1 	bl	8000320 <HAL_ADC_ConfigChannel>
 800217e:	b100      	cbz	r0, 8002182 <main+0xea>
 8002180:	e7fe      	b.n	8002180 <main+0xe8>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002182:	a906      	add	r1, sp, #24
 8002184:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002186:	e9cd 7706 	strd	r7, r7, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800218a:	f7fe f8c9 	bl	8000320 <HAL_ADC_ConfigChannel>
 800218e:	4606      	mov	r6, r0
 8002190:	b100      	cbz	r0, 8002194 <main+0xfc>
 8002192:	e7fe      	b.n	8002192 <main+0xfa>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_buffer,2);
 8002194:	463a      	mov	r2, r7
 8002196:	4921      	ldr	r1, [pc, #132]	; (800221c <main+0x184>)
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe f9dd 	bl	8000558 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 800219e:	4620      	mov	r0, r4
 80021a0:	f7fe f974 	bl	800048c <HAL_ADC_Start_IT>
	inic_LCD();
 80021a4:	f000 f8be 	bl	8002324 <_Z8inic_LCDv>
	limpa_LCD();
 80021a8:	f000 f932 	bl	8002410 <_Z9limpa_LCDv>
	goto_XY(0, 0);
 80021ac:	4631      	mov	r1, r6
 80021ae:	4630      	mov	r0, r6
 80021b0:	f000 f8de 	bl	8002370 <_Z7goto_XYmm>
	string_LCD("BUGss.  Botao");
 80021b4:	481a      	ldr	r0, [pc, #104]	; (8002220 <main+0x188>)
 80021b6:	f000 f921 	bl	80023fc <_Z10string_LCDPc>
	imprime_LCD();
 80021ba:	f000 f8f3 	bl	80023a4 <_Z11imprime_LCDv>
	lfsr = valor;
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <main+0x18c>)
 80021c0:	601d      	str	r5, [r3, #0]
	limpa_LCD();
 80021c2:	f000 f925 	bl	8002410 <_Z9limpa_LCDv>
	escreve2fb((unsigned char *)dragon);
 80021c6:	4818      	ldr	r0, [pc, #96]	; (8002228 <main+0x190>)
 80021c8:	f000 f8e0 	bl	800238c <_Z10escreve2fbPh>
	imprime_LCD();
 80021cc:	f000 f8ea 	bl	80023a4 <_Z11imprime_LCDv>
	HAL_Delay(1000);
 80021d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d4:	f7fd ffe0 	bl	8000198 <HAL_Delay>
	limpa_LCD();
 80021d8:	f000 f91a 	bl	8002410 <_Z9limpa_LCDv>
	imprime_LCD();
 80021dc:	f000 f8e2 	bl	80023a4 <_Z11imprime_LCDv>
	xTaskCreate(vTask_LCD_Print, "Task 1", 100, NULL, 1,NULL);
 80021e0:	4633      	mov	r3, r6
 80021e2:	2264      	movs	r2, #100	; 0x64
 80021e4:	4911      	ldr	r1, [pc, #68]	; (800222c <main+0x194>)
 80021e6:	e9cd 5600 	strd	r5, r6, [sp]
 80021ea:	4811      	ldr	r0, [pc, #68]	; (8002230 <main+0x198>)
 80021ec:	f7ff fa04 	bl	80015f8 <xTaskCreate>
	xTaskCreate(vTask_Nr_Print, "Task 2", 100, NULL, 1,NULL);
 80021f0:	4633      	mov	r3, r6
 80021f2:	2264      	movs	r2, #100	; 0x64
 80021f4:	490f      	ldr	r1, [pc, #60]	; (8002234 <main+0x19c>)
 80021f6:	e9cd 5600 	strd	r5, r6, [sp]
 80021fa:	480f      	ldr	r0, [pc, #60]	; (8002238 <main+0x1a0>)
 80021fc:	f7ff f9fc 	bl	80015f8 <xTaskCreate>
	vTaskStartScheduler();	// apos este comando o RTOS passa a executar as tarefas
 8002200:	f7ff faca 	bl	8001798 <vTaskStartScheduler>
 8002204:	e7fe      	b.n	8002204 <main+0x16c>
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40011000 	.word	0x40011000
 8002210:	40010800 	.word	0x40010800
 8002214:	20000d7c 	.word	0x20000d7c
 8002218:	40012400 	.word	0x40012400
 800221c:	20000d74 	.word	0x20000d74
 8002220:	08002c99 	.word	0x08002c99
 8002224:	20000df0 	.word	0x20000df0
 8002228:	08002aa1 	.word	0x08002aa1
 800222c:	08002ca7 	.word	0x08002ca7
 8002230:	08001f9f 	.word	0x08001f9f
 8002234:	08002cae 	.word	0x08002cae
 8002238:	08001fcd 	.word	0x08001fcd

0800223c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800223c:	6802      	ldr	r2, [r0, #0]
 800223e:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002240:	429a      	cmp	r2, r3
 8002242:	d101      	bne.n	8002248 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002244:	f7fd bf96 	b.w	8000174 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40000800 	.word	0x40000800

08002250 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002250:	e7fe      	b.n	8002250 <_Error_Handler>
	...

08002254 <_Z7cmd_LCDm>:
//----------------------------------------------------------------------------------------------
/*	There are two memory banks in the LCD, data/RAM and commands. This
	function sets the DC pin high or low depending, and then sends the data byte */
//----------------------------------------------------------------------------------------------
void cmd_LCD(uint32_t data)
{
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t i=8;

	CLR_DC();					// comando para o LCD
 8002256:	2200      	movs	r2, #0
 8002258:	2120      	movs	r1, #32
{
 800225a:	4605      	mov	r5, r0
	CLR_DC();					// comando para o LCD
 800225c:	4816      	ldr	r0, [pc, #88]	; (80022b8 <_Z7cmd_LCDm+0x64>)
 800225e:	f7fe fd07 	bl	8000c70 <HAL_GPIO_WritePin>

	//Send the data
	CLR_CE();
 8002262:	2200      	movs	r2, #0
 8002264:	2140      	movs	r1, #64	; 0x40
 8002266:	4814      	ldr	r0, [pc, #80]	; (80022b8 <_Z7cmd_LCDm+0x64>)
 8002268:	f7fe fd02 	bl	8000c70 <HAL_GPIO_WritePin>
	uint32_t i=8;
 800226c:	2408      	movs	r4, #8
	do								// MSB primeiro
	{	i--;
		if(tst_bit(data,i))
 800226e:	2701      	movs	r7, #1
			SET_DIN();
		else
			CLR_DIN();
 8002270:	4e11      	ldr	r6, [pc, #68]	; (80022b8 <_Z7cmd_LCDm+0x64>)
	{	i--;
 8002272:	3c01      	subs	r4, #1
		if(tst_bit(data,i))
 8002274:	fa07 f204 	lsl.w	r2, r7, r4
 8002278:	402a      	ands	r2, r5
			SET_DIN();
 800227a:	bf18      	it	ne
 800227c:	2201      	movne	r2, #1
			CLR_DIN();
 800227e:	2110      	movs	r1, #16
 8002280:	4630      	mov	r0, r6
 8002282:	f7fe fcf5 	bl	8000c70 <HAL_GPIO_WritePin>
		PULSO_CLK();
 8002286:	2001      	movs	r0, #1
 8002288:	f7ff fe80 	bl	8001f8c <_Z9atraso_usm>
 800228c:	2201      	movs	r2, #1
 800228e:	2108      	movs	r1, #8
 8002290:	4809      	ldr	r0, [pc, #36]	; (80022b8 <_Z7cmd_LCDm+0x64>)
 8002292:	f7fe fced 	bl	8000c70 <HAL_GPIO_WritePin>
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff fe78 	bl	8001f8c <_Z9atraso_usm>
 800229c:	2200      	movs	r2, #0
 800229e:	2108      	movs	r1, #8
 80022a0:	4805      	ldr	r0, [pc, #20]	; (80022b8 <_Z7cmd_LCDm+0x64>)
 80022a2:	f7fe fce5 	bl	8000c70 <HAL_GPIO_WritePin>

	}while(i!=0);
 80022a6:	2c00      	cmp	r4, #0
 80022a8:	d1e3      	bne.n	8002272 <_Z7cmd_LCDm+0x1e>

	SET_CE();
}
 80022aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	SET_CE();
 80022ae:	2201      	movs	r2, #1
 80022b0:	2140      	movs	r1, #64	; 0x40
 80022b2:	4801      	ldr	r0, [pc, #4]	; (80022b8 <_Z7cmd_LCDm+0x64>)
 80022b4:	f7fe bcdc 	b.w	8000c70 <HAL_GPIO_WritePin>
 80022b8:	40010800 	.word	0x40010800

080022bc <_Z8data_LCDm>:
//----------------------------------------------------------------------------------------------
void data_LCD(uint32_t data)
{
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t i=8;

	SET_DC();					// dado para o LCD
 80022be:	2201      	movs	r2, #1
 80022c0:	2120      	movs	r1, #32
{
 80022c2:	4605      	mov	r5, r0
	SET_DC();					// dado para o LCD
 80022c4:	4816      	ldr	r0, [pc, #88]	; (8002320 <_Z8data_LCDm+0x64>)
 80022c6:	f7fe fcd3 	bl	8000c70 <HAL_GPIO_WritePin>

	//Send the data
	CLR_CE();
 80022ca:	2200      	movs	r2, #0
 80022cc:	2140      	movs	r1, #64	; 0x40
 80022ce:	4814      	ldr	r0, [pc, #80]	; (8002320 <_Z8data_LCDm+0x64>)
 80022d0:	f7fe fcce 	bl	8000c70 <HAL_GPIO_WritePin>
	uint32_t i=8;
 80022d4:	2408      	movs	r4, #8
	do								// MSB primeiro
	{	i--;
		if(tst_bit(data,i))
 80022d6:	2701      	movs	r7, #1
			SET_DIN();
		else
			CLR_DIN();
 80022d8:	4e11      	ldr	r6, [pc, #68]	; (8002320 <_Z8data_LCDm+0x64>)
	{	i--;
 80022da:	3c01      	subs	r4, #1
		if(tst_bit(data,i))
 80022dc:	fa07 f204 	lsl.w	r2, r7, r4
 80022e0:	402a      	ands	r2, r5
			SET_DIN();
 80022e2:	bf18      	it	ne
 80022e4:	2201      	movne	r2, #1
			CLR_DIN();
 80022e6:	2110      	movs	r1, #16
 80022e8:	4630      	mov	r0, r6
 80022ea:	f7fe fcc1 	bl	8000c70 <HAL_GPIO_WritePin>
		PULSO_CLK();
 80022ee:	2001      	movs	r0, #1
 80022f0:	f7ff fe4c 	bl	8001f8c <_Z9atraso_usm>
 80022f4:	2201      	movs	r2, #1
 80022f6:	2108      	movs	r1, #8
 80022f8:	4809      	ldr	r0, [pc, #36]	; (8002320 <_Z8data_LCDm+0x64>)
 80022fa:	f7fe fcb9 	bl	8000c70 <HAL_GPIO_WritePin>
 80022fe:	2001      	movs	r0, #1
 8002300:	f7ff fe44 	bl	8001f8c <_Z9atraso_usm>
 8002304:	2200      	movs	r2, #0
 8002306:	2108      	movs	r1, #8
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <_Z8data_LCDm+0x64>)
 800230a:	f7fe fcb1 	bl	8000c70 <HAL_GPIO_WritePin>

	}while(i!=0);
 800230e:	2c00      	cmp	r4, #0
 8002310:	d1e3      	bne.n	80022da <_Z8data_LCDm+0x1e>

	SET_CE();
}
 8002312:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	SET_CE();
 8002316:	2201      	movs	r2, #1
 8002318:	2140      	movs	r1, #64	; 0x40
 800231a:	4801      	ldr	r0, [pc, #4]	; (8002320 <_Z8data_LCDm+0x64>)
 800231c:	f7fe bca8 	b.w	8000c70 <HAL_GPIO_WritePin>
 8002320:	40010800 	.word	0x40010800

08002324 <_Z8inic_LCDv>:
//-----------------------------------------------------------------------------------------------
void inic_LCD()
{
 8002324:	b510      	push	{r4, lr}
	// Reset the LCD to a known state
	CLR_RST();
 8002326:	4c11      	ldr	r4, [pc, #68]	; (800236c <_Z8inic_LCDv+0x48>)
 8002328:	2200      	movs	r2, #0
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	4620      	mov	r0, r4
 800232e:	f7fe fc9f 	bl	8000c70 <HAL_GPIO_WritePin>
	atraso_us(10);
 8002332:	200a      	movs	r0, #10
 8002334:	f7ff fe2a 	bl	8001f8c <_Z9atraso_usm>
	SET_RST();
 8002338:	2201      	movs	r2, #1
 800233a:	2180      	movs	r1, #128	; 0x80
 800233c:	4620      	mov	r0, r4
 800233e:	f7fe fc97 	bl	8000c70 <HAL_GPIO_WritePin>

	cmd_LCD(0x21);			//Tell LCD that extended commands follow
 8002342:	2021      	movs	r0, #33	; 0x21
 8002344:	f7ff ff86 	bl	8002254 <_Z7cmd_LCDm>
	cmd_LCD(0xBA);			//Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF if your display is too dark
 8002348:	20ba      	movs	r0, #186	; 0xba
 800234a:	f7ff ff83 	bl	8002254 <_Z7cmd_LCDm>
	cmd_LCD(0x04);			//Set Temp coefficent
 800234e:	2004      	movs	r0, #4
 8002350:	f7ff ff80 	bl	8002254 <_Z7cmd_LCDm>
	cmd_LCD(0x14);			//LCD bias mode 1:48: Try 0x13 or 0x14
 8002354:	2014      	movs	r0, #20
 8002356:	f7ff ff7d 	bl	8002254 <_Z7cmd_LCDm>

	cmd_LCD(0x20);			//We must send 0x20 before modifying the display control mode
 800235a:	2020      	movs	r0, #32
 800235c:	f7ff ff7a 	bl	8002254 <_Z7cmd_LCDm>
	cmd_LCD(0x0C);			//Set display control, normal mode. 0x0D for inverse
}
 8002360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd_LCD(0x0C);			//Set display control, normal mode. 0x0D for inverse
 8002364:	200c      	movs	r0, #12
 8002366:	f7ff bf75 	b.w	8002254 <_Z7cmd_LCDm>
 800236a:	bf00      	nop
 800236c:	40010800 	.word	0x40010800

08002370 <_Z7goto_XYmm>:
//-----------------------------------------------------------------------------------------------
void goto_XY(uint32_t x, uint32_t y)  // 0<=x<=83  0<=y<=5
{
 8002370:	2905      	cmp	r1, #5
 8002372:	bf28      	it	cs
 8002374:	2105      	movcs	r1, #5
	if(y>5)	y=5;
	if(x>84)	x=83;

	indice_fb =  x + (84*y);		// indice para ser empregado no fb
 8002376:	2354      	movs	r3, #84	; 0x54
	if(x>84)	x=83;
 8002378:	2854      	cmp	r0, #84	; 0x54
 800237a:	bf88      	it	hi
 800237c:	2053      	movhi	r0, #83	; 0x53
	indice_fb =  x + (84*y);		// indice para ser empregado no fb
 800237e:	fb03 0101 	mla	r1, r3, r1, r0
 8002382:	4b01      	ldr	r3, [pc, #4]	; (8002388 <_Z7goto_XYmm+0x18>)
 8002384:	6019      	str	r1, [r3, #0]
}
 8002386:	4770      	bx	lr
 8002388:	20000ff4 	.word	0x20000ff4

0800238c <_Z10escreve2fbPh>:
//-----------------------------------------------------------------------------------------------
void escreve2fb(unsigned char imagem[])				// altera o frame buffer, uso para c�pia de figura
{
	uint32_t i;

	for(i=0; i<504; i++)
 800238c:	2300      	movs	r3, #0
		fb[i]= imagem[i];
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <_Z10escreve2fbPh+0x14>)
 8002390:	5cc1      	ldrb	r1, [r0, r3]
 8002392:	5499      	strb	r1, [r3, r2]
	for(i=0; i<504; i++)
 8002394:	3301      	adds	r3, #1
 8002396:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800239a:	d1f9      	bne.n	8002390 <_Z10escreve2fbPh+0x4>
}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000dfc 	.word	0x20000dfc

080023a4 <_Z11imprime_LCDv>:
//-----------------------------------------------------------------------------------------------
void imprime_LCD()		// desenha em todo o LCD
{
 80023a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t i;

	for (i=0 ; i < 504 ; i++)
 80023a6:	2400      	movs	r4, #0
		data_LCD(fb[i]);
 80023a8:	4d04      	ldr	r5, [pc, #16]	; (80023bc <_Z11imprime_LCDv+0x18>)
 80023aa:	5d28      	ldrb	r0, [r5, r4]
	for (i=0 ; i < 504 ; i++)
 80023ac:	3401      	adds	r4, #1
		data_LCD(fb[i]);
 80023ae:	f7ff ff85 	bl	80022bc <_Z8data_LCDm>
	for (i=0 ; i < 504 ; i++)
 80023b2:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80023b6:	d1f8      	bne.n	80023aa <_Z11imprime_LCDv+0x6>
}
 80023b8:	bd38      	pop	{r3, r4, r5, pc}
 80023ba:	bf00      	nop
 80023bc:	20000dfc 	.word	0x20000dfc

080023c0 <_Z13caractere_LCDc>:
 * Os caracteres s� podem ser escritos na linha correspondente ao banco	(0-5)							*/
void caractere_LCD(char character)
{
	uint32_t i;

	fb[indice_fb] = 0x00;		//Blank vertical line padding
 80023c0:	2100      	movs	r1, #0
{
 80023c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	fb[indice_fb] = 0x00;		//Blank vertical line padding
 80023c4:	4c0a      	ldr	r4, [pc, #40]	; (80023f0 <_Z13caractere_LCDc+0x30>)
 80023c6:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <_Z13caractere_LCDc+0x34>)
 80023c8:	6823      	ldr	r3, [r4, #0]
	indice_fb++;

	for( i= 0 ; i < 5 ; i++)
	{
		fb[indice_fb] = ASCII[character - 0x20][i];//0x20 is the ASCII character for Space (' '). The font table starts with this character
 80023ca:	4f0b      	ldr	r7, [pc, #44]	; (80023f8 <_Z13caractere_LCDc+0x38>)
	fb[indice_fb] = 0x00;		//Blank vertical line padding
 80023cc:	54d1      	strb	r1, [r2, r3]
 80023ce:	2101      	movs	r1, #1
 80023d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		fb[indice_fb] = ASCII[character - 0x20][i];//0x20 is the ASCII character for Space (' '). The font table starts with this character
 80023d4:	18d6      	adds	r6, r2, r3
 80023d6:	180d      	adds	r5, r1, r0
 80023d8:	443d      	add	r5, r7
 80023da:	f815 5ca1 	ldrb.w	r5, [r5, #-161]
 80023de:	5475      	strb	r5, [r6, r1]
 80023e0:	3101      	adds	r1, #1
	for( i= 0 ; i < 5 ; i++)
 80023e2:	2906      	cmp	r1, #6
 80023e4:	d1f7      	bne.n	80023d6 <_Z13caractere_LCDc+0x16>
		indice_fb++;
	}

	fb[indice_fb] = 0x00; //Blank vertical line padding
 80023e6:	2100      	movs	r1, #0
 80023e8:	3306      	adds	r3, #6
 80023ea:	54d1      	strb	r1, [r2, r3]
 80023ec:	6023      	str	r3, [r4, #0]
}
 80023ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023f0:	20000ff4 	.word	0x20000ff4
 80023f4:	20000dfc 	.word	0x20000dfc
 80023f8:	08002cb5 	.word	0x08002cb5

080023fc <_Z10string_LCDPc>:
//-----------------------------------------------------------------------------------------------
void string_LCD(char *msg)
{
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e44      	subs	r4, r0, #1
	while(*msg)
 8002400:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002404:	b110      	cbz	r0, 800240c <_Z10string_LCDPc+0x10>
		caractere_LCD(*msg++);
 8002406:	f7ff ffdb 	bl	80023c0 <_Z13caractere_LCDc>
	while(*msg)
 800240a:	e7f9      	b.n	8002400 <_Z10string_LCDPc+0x4>
}
 800240c:	bd10      	pop	{r4, pc}
	...

08002410 <_Z9limpa_LCDv>:
//Clears the LCD by writing zeros to the entire screen
void limpa_LCD()
{
	uint32_t i;

	for ( i= 0 ; i < 504 ; i++)
 8002410:	2300      	movs	r3, #0
		fb[i] = 0x00;
 8002412:	4619      	mov	r1, r3
 8002414:	4a03      	ldr	r2, [pc, #12]	; (8002424 <_Z9limpa_LCDv+0x14>)
 8002416:	5499      	strb	r1, [r3, r2]
	for ( i= 0 ; i < 504 ; i++)
 8002418:	3301      	adds	r3, #1
 800241a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800241e:	d1fa      	bne.n	8002416 <_Z9limpa_LCDv+0x6>
}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000dfc 	.word	0x20000dfc

08002428 <_Z13desenha_pixelmmm>:
// Desenha pixel
//-----------------------------------------------------------------------------------------------
void desenha_pixel(uint32_t x,				/* ponto horizontal para o pixel: 0 -> 83 (esq -> dir)	*/
				   uint32_t y,				/* ponto vertical para o pixel: 0 -> 47 (cima -> baixo)	*/
				   uint32_t propr)			/* 0 =  apaga pixel, 1 = liga pixel				*/
{
 8002428:	292f      	cmp	r1, #47	; 0x2f
 800242a:	bf28      	it	cs
 800242c:	212f      	movcs	r1, #47	; 0x2f
	uint32_t i;

	if(x>83)	x=83;
	if(y>47)	y=47;

	i = x + (84*(y/8));		/* determina��o do indice do byte a ser alterado [0 - 503]	*/
 800242e:	2853      	cmp	r0, #83	; 0x53
 8002430:	f04f 0354 	mov.w	r3, #84	; 0x54
 8002434:	bf28      	it	cs
 8002436:	2053      	movcs	r0, #83	; 0x53
{
 8002438:	b530      	push	{r4, r5, lr}
	i = x + (84*(y/8));		/* determina��o do indice do byte a ser alterado [0 - 503]	*/
 800243a:	08cc      	lsrs	r4, r1, #3
 800243c:	fb03 0004 	mla	r0, r3, r4, r0
 8002440:	f001 0407 	and.w	r4, r1, #7
 8002444:	2101      	movs	r1, #1
 8002446:	4d05      	ldr	r5, [pc, #20]	; (800245c <_Z13desenha_pixelmmm+0x34>)
 8002448:	40a1      	lsls	r1, r4
 800244a:	562b      	ldrsb	r3, [r5, r0]
 800244c:	b249      	sxtb	r1, r1

	if(propr==0)
 800244e:	b91a      	cbnz	r2, 8002458 <_Z13desenha_pixelmmm+0x30>
		clr_bit(fb[i],y%8);
 8002450:	ea23 0301 	bic.w	r3, r3, r1
	else
		set_bit(fb[i],y%8);
 8002454:	542b      	strb	r3, [r5, r0]

}
 8002456:	bd30      	pop	{r4, r5, pc}
		set_bit(fb[i],y%8);
 8002458:	430b      	orrs	r3, r1
 800245a:	e7fb      	b.n	8002454 <_Z13desenha_pixelmmm+0x2c>
 800245c:	20000dfc 	.word	0x20000dfc

08002460 <_Z13desenha_linhaP8pontos_tm>:
//-----------------------------------------------------------------------------------------------
// Desenha linha - ALGORITMO DE BRESENHAM - (http://www.etechplanet.com/codesnippets/computer-graphics-draw-a-line-using-bresenham-algorithm.aspx)
//-----------------------------------------------------------------------------------------------
void desenha_linha(struct  pontos_t *p,		/*  p.x1=x1, p.y1=y1, p.x2=x2, p.y2=y2, passagem dos pontos por struct	*/
						   uint32_t prop)	/* 0 =  paga pixel, 1 = liga pixel				*/
{
 8002460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, x, y, x1, y1, x2, y2;
	int32_t dx, dy, dx1, dy1, px, py, xe, ye;

	x1 = p->x1;
	y1 = p->y1;
 8002464:	e9d0 4500 	ldrd	r4, r5, [r0]
	x2 = p->x2;
	y2 = p->y2;
 8002468:	e9d0 3202 	ldrd	r3, r2, [r0, #8]

	dx = x2-x1;
 800246c:	eba3 0a04 	sub.w	sl, r3, r4
	dy = y2-y1;
 8002470:	eba2 0805 	sub.w	r8, r2, r5

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8002474:	ea8a 76ea 	eor.w	r6, sl, sl, asr #31
 8002478:	ea88 77e8 	eor.w	r7, r8, r8, asr #31
 800247c:	eba6 76ea 	sub.w	r6, r6, sl, asr #31
 8002480:	eba7 77e8 	sub.w	r7, r7, r8, asr #31
	dx1 = abs(dx);
	dy1 = abs(dy);
	px = 2*dy1 - dx1;
	py = 2*dx1 - dy1;

	if(dy1 <= dx1)
 8002484:	42be      	cmp	r6, r7
{
 8002486:	4689      	mov	r9, r1
	if(dy1 <= dx1)
 8002488:	db30      	blt.n	80024ec <_Z13desenha_linhaP8pontos_tm+0x8c>
	{	if(dx >= 0)
 800248a:	f1ba 0f00 	cmp.w	sl, #0
			y = y1;
			xe = x2;
		}
		else
		{	x = x2;
			y = y2;
 800248e:	bfbd      	ittte	lt
 8002490:	4615      	movlt	r5, r2
			xe = x1;
 8002492:	9400      	strlt	r4, [sp, #0]
		{	x = x2;
 8002494:	461c      	movlt	r4, r3
			xe = x2;
 8002496:	9300      	strge	r3, [sp, #0]
		}
		desenha_pixel(x,y,prop);
 8002498:	460a      	mov	r2, r1
	px = 2*dy1 - dx1;
 800249a:	007b      	lsls	r3, r7, #1
		desenha_pixel(x,y,prop);
 800249c:	4629      	mov	r1, r5
 800249e:	4620      	mov	r0, r4
	px = 2*dy1 - dx1;
 80024a0:	eba3 0b06 	sub.w	fp, r3, r6
 80024a4:	9301      	str	r3, [sp, #4]
		desenha_pixel(x,y,prop);
 80024a6:	f7ff ffbf 	bl	8002428 <_Z13desenha_pixelmmm>
			{
				if((dx<0 && dy<0) || (dx>0 && dy>0))
					y++;
				else
					y--;
				px = px + 2*(dy1-dx1);
 80024aa:	1bbe      	subs	r6, r7, r6
 80024ac:	0076      	lsls	r6, r6, #1
		for(i=0; x<xe; i++)
 80024ae:	9b00      	ldr	r3, [sp, #0]
 80024b0:	42a3      	cmp	r3, r4
 80024b2:	d94e      	bls.n	8002552 <_Z13desenha_linhaP8pontos_tm+0xf2>
			if(px<0)
 80024b4:	f1bb 0f00 	cmp.w	fp, #0
			x++;
 80024b8:	f104 0401 	add.w	r4, r4, #1
			if(px<0)
 80024bc:	da07      	bge.n	80024ce <_Z13desenha_linhaP8pontos_tm+0x6e>
				px = px + 2*dy1;
 80024be:	9b01      	ldr	r3, [sp, #4]
 80024c0:	449b      	add	fp, r3
			}
			desenha_pixel(x,y,prop);
 80024c2:	464a      	mov	r2, r9
 80024c4:	4629      	mov	r1, r5
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7ff ffae 	bl	8002428 <_Z13desenha_pixelmmm>
		for(i=0; x<xe; i++)
 80024cc:	e7ef      	b.n	80024ae <_Z13desenha_linhaP8pontos_tm+0x4e>
				if((dx<0 && dy<0) || (dx>0 && dy>0))
 80024ce:	f1ba 0f00 	cmp.w	sl, #0
 80024d2:	da05      	bge.n	80024e0 <_Z13desenha_linhaP8pontos_tm+0x80>
 80024d4:	f1b8 0f00 	cmp.w	r8, #0
 80024d8:	da06      	bge.n	80024e8 <_Z13desenha_linhaP8pontos_tm+0x88>
					y++;
 80024da:	3501      	adds	r5, #1
				px = px + 2*(dy1-dx1);
 80024dc:	44b3      	add	fp, r6
 80024de:	e7f0      	b.n	80024c2 <_Z13desenha_linhaP8pontos_tm+0x62>
				if((dx<0 && dy<0) || (dx>0 && dy>0))
 80024e0:	d002      	beq.n	80024e8 <_Z13desenha_linhaP8pontos_tm+0x88>
 80024e2:	f1b8 0f00 	cmp.w	r8, #0
 80024e6:	dcf8      	bgt.n	80024da <_Z13desenha_linhaP8pontos_tm+0x7a>
					y--;
 80024e8:	3d01      	subs	r5, #1
 80024ea:	e7f7      	b.n	80024dc <_Z13desenha_linhaP8pontos_tm+0x7c>
		}
	}
	else
	{
		if(dy >= 0)
 80024ec:	f1b8 0f00 	cmp.w	r8, #0
		{	x=x1;
			y=y1;
			ye=y2;
		}
		else
		{	x=x2;
 80024f0:	bfbe      	ittt	lt
 80024f2:	461c      	movlt	r4, r3
			y=y2;
			ye=y1;
 80024f4:	9500      	strlt	r5, [sp, #0]
			y=y2;
 80024f6:	4615      	movlt	r5, r2
	py = 2*dx1 - dy1;
 80024f8:	ea4f 0346 	mov.w	r3, r6, lsl #1
			ye=y2;
 80024fc:	bfa8      	it	ge
 80024fe:	9200      	strge	r2, [sp, #0]
		}
		desenha_pixel(x,y,prop);
 8002500:	4620      	mov	r0, r4
 8002502:	460a      	mov	r2, r1
 8002504:	4629      	mov	r1, r5
	py = 2*dx1 - dy1;
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	eba3 0b07 	sub.w	fp, r3, r7
		desenha_pixel(x,y,prop);
 800250c:	f7ff ff8c 	bl	8002428 <_Z13desenha_pixelmmm>
			{
				if((dx<0 && dy<0) || (dx>0 && dy>0))
					x++;
				else
					x--;
				py = py + 2*(dx1-dy1);
 8002510:	1bf6      	subs	r6, r6, r7
 8002512:	0076      	lsls	r6, r6, #1
		for(i=0;y<ye;i++)
 8002514:	9b00      	ldr	r3, [sp, #0]
 8002516:	42ab      	cmp	r3, r5
 8002518:	d91b      	bls.n	8002552 <_Z13desenha_linhaP8pontos_tm+0xf2>
			if(py <= 0)
 800251a:	f1bb 0f00 	cmp.w	fp, #0
			y++;
 800251e:	f105 0501 	add.w	r5, r5, #1
			if(py <= 0)
 8002522:	dc07      	bgt.n	8002534 <_Z13desenha_linhaP8pontos_tm+0xd4>
				py = py + 2*dx1;
 8002524:	9b01      	ldr	r3, [sp, #4]
 8002526:	449b      	add	fp, r3
			}
			desenha_pixel(x,y,prop);
 8002528:	464a      	mov	r2, r9
 800252a:	4629      	mov	r1, r5
 800252c:	4620      	mov	r0, r4
 800252e:	f7ff ff7b 	bl	8002428 <_Z13desenha_pixelmmm>
		for(i=0;y<ye;i++)
 8002532:	e7ef      	b.n	8002514 <_Z13desenha_linhaP8pontos_tm+0xb4>
				if((dx<0 && dy<0) || (dx>0 && dy>0))
 8002534:	f1ba 0f00 	cmp.w	sl, #0
 8002538:	da05      	bge.n	8002546 <_Z13desenha_linhaP8pontos_tm+0xe6>
 800253a:	f1b8 0f00 	cmp.w	r8, #0
 800253e:	da06      	bge.n	800254e <_Z13desenha_linhaP8pontos_tm+0xee>
					x++;
 8002540:	3401      	adds	r4, #1
				py = py + 2*(dx1-dy1);
 8002542:	44b3      	add	fp, r6
 8002544:	e7f0      	b.n	8002528 <_Z13desenha_linhaP8pontos_tm+0xc8>
				if((dx<0 && dy<0) || (dx>0 && dy>0))
 8002546:	d002      	beq.n	800254e <_Z13desenha_linhaP8pontos_tm+0xee>
 8002548:	f1b8 0f00 	cmp.w	r8, #0
 800254c:	dcf8      	bgt.n	8002540 <_Z13desenha_linhaP8pontos_tm+0xe0>
					x--;
 800254e:	3c01      	subs	r4, #1
 8002550:	e7f7      	b.n	8002542 <_Z13desenha_linhaP8pontos_tm+0xe2>
		}
	}
}
 8002552:	b003      	add	sp, #12
 8002554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002558 <_Z15desenha_circulolllm>:
//--------------------------------------------------------------------------------------------------------------
// Desenha Circulo - Algoritmo de Ponto M�dio http://rosettacode.org/wiki/Bitmap/Midpoint_circle_algorithm#C
//--------------------------------------------------------------------------------------------------------------
void desenha_circulo(int32_t x0, int32_t y0,int32_t radius,	// valores int se fazem necess�rio devido as compara��es
											 uint32_t prop) // 0 =  paga pixel, 1 = liga pixel
{
 8002558:	2853      	cmp	r0, #83	; 0x53
 800255a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800255e:	bfa8      	it	ge
 8002560:	2053      	movge	r0, #83	; 0x53
 8002562:	292f      	cmp	r1, #47	; 0x2f
 8002564:	bfa8      	it	ge
 8002566:	212f      	movge	r1, #47	; 0x2f
	  if(x0>83)	x0=83;
	  if(y0>47) y0=47;

	  f = 1 - radius;
	  ddF_x = 0;
	  ddF_y = -2 * radius;
 8002568:	f06f 0a01 	mvn.w	sl, #1
 800256c:	460d      	mov	r5, r1
	  x = 0;
	  y = radius;

	  // evita a impress�o fora do dom�nio de x e y (erros de impress�o)
	  if((y0 + radius) < 48)		desenha_pixel(x0, y0 + radius,prop);
 800256e:	4411      	add	r1, r2
 8002570:	292f      	cmp	r1, #47	; 0x2f
{
 8002572:	4614      	mov	r4, r2
 8002574:	461e      	mov	r6, r3
 8002576:	4607      	mov	r7, r0
	  f = 1 - radius;
 8002578:	f1c2 0801 	rsb	r8, r2, #1
	  ddF_y = -2 * radius;
 800257c:	fb0a fa02 	mul.w	sl, sl, r2
	  if((y0 + radius) < 48)		desenha_pixel(x0, y0 + radius,prop);
 8002580:	dc02      	bgt.n	8002588 <_Z15desenha_circulolllm+0x30>
 8002582:	461a      	mov	r2, r3
 8002584:	f7ff ff50 	bl	8002428 <_Z13desenha_pixelmmm>
	  if((y0 - radius) >= 0)		desenha_pixel(x0, y0 - radius,prop);
 8002588:	1b29      	subs	r1, r5, r4
 800258a:	d403      	bmi.n	8002594 <_Z15desenha_circulolllm+0x3c>
 800258c:	4632      	mov	r2, r6
 800258e:	4638      	mov	r0, r7
 8002590:	f7ff ff4a 	bl	8002428 <_Z13desenha_pixelmmm>
	  if((x0 + radius) < 84)		desenha_pixel(x0 + radius, y0,prop);
 8002594:	1938      	adds	r0, r7, r4
 8002596:	2853      	cmp	r0, #83	; 0x53
 8002598:	dc03      	bgt.n	80025a2 <_Z15desenha_circulolllm+0x4a>
 800259a:	4632      	mov	r2, r6
 800259c:	4629      	mov	r1, r5
 800259e:	f7ff ff43 	bl	8002428 <_Z13desenha_pixelmmm>
	  if((x0 - radius) >= 0)		desenha_pixel(x0 - radius, y0,prop);
 80025a2:	1b38      	subs	r0, r7, r4
 80025a4:	d403      	bmi.n	80025ae <_Z15desenha_circulolllm+0x56>
 80025a6:	4632      	mov	r2, r6
 80025a8:	4629      	mov	r1, r5
 80025aa:	f7ff ff3d 	bl	8002428 <_Z13desenha_pixelmmm>
{
 80025ae:	2600      	movs	r6, #0

	  while(x < y)
 80025b0:	42a6      	cmp	r6, r4
 80025b2:	da75      	bge.n	80026a0 <_Z15desenha_circulolllm+0x148>
	  {
		  if(f >= 0)
 80025b4:	f1b8 0f00 	cmp.w	r8, #0
		  {
			  y--;
			  ddF_y += 2;
 80025b8:	bfa8      	it	ge
 80025ba:	f10a 0a02 	addge.w	sl, sl, #2
			  f += ddF_y;
		  }
		  x++;
 80025be:	f106 0601 	add.w	r6, r6, #1
			  f += ddF_y;
 80025c2:	bfa8      	it	ge
 80025c4:	44d0      	addge	r8, sl
 80025c6:	eb06 0907 	add.w	r9, r6, r7
			  y--;
 80025ca:	bfa8      	it	ge
 80025cc:	f104 34ff 	addge.w	r4, r4, #4294967295
		  ddF_x += 2;
		  f += ddF_x + 1;
 80025d0:	eb08 0846 	add.w	r8, r8, r6, lsl #1

		  // evita a impress�o fora do dom�nio de x e y (erros de impress�o)
		  if(((x0+x) <84) && ((y0+y) < 48))		desenha_pixel(x0 + x, y0 + y,1);
 80025d4:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
		  f += ddF_x + 1;
 80025d8:	f108 0801 	add.w	r8, r8, #1
		  if(((x0+x) <84) && ((y0+y) < 48))		desenha_pixel(x0 + x, y0 + y,1);
 80025dc:	dc06      	bgt.n	80025ec <_Z15desenha_circulolllm+0x94>
 80025de:	1929      	adds	r1, r5, r4
 80025e0:	292f      	cmp	r1, #47	; 0x2f
 80025e2:	dc03      	bgt.n	80025ec <_Z15desenha_circulolllm+0x94>
 80025e4:	2201      	movs	r2, #1
 80025e6:	4648      	mov	r0, r9
 80025e8:	f7ff ff1e 	bl	8002428 <_Z13desenha_pixelmmm>
		  if(((x0-x) >=0) && ((y0+y) < 48))		desenha_pixel(x0 - x, y0 + y,1);
 80025ec:	ebb7 0b06 	subs.w	fp, r7, r6
 80025f0:	d419      	bmi.n	8002626 <_Z15desenha_circulolllm+0xce>
 80025f2:	1929      	adds	r1, r5, r4
 80025f4:	292f      	cmp	r1, #47	; 0x2f
 80025f6:	dc03      	bgt.n	8002600 <_Z15desenha_circulolllm+0xa8>
 80025f8:	2201      	movs	r2, #1
 80025fa:	4658      	mov	r0, fp
 80025fc:	f7ff ff14 	bl	8002428 <_Z13desenha_pixelmmm>
		  if(((x0+x) <84) && ((y0-y) >=0))		desenha_pixel(x0 + x, y0 - y,1);
 8002600:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
 8002604:	dd12      	ble.n	800262c <_Z15desenha_circulolllm+0xd4>
		  if(((x0-x) >=0) && ((y0-y) >=0))		desenha_pixel(x0 - x, y0 - y,1);
 8002606:	1b2b      	subs	r3, r5, r4
 8002608:	d41c      	bmi.n	8002644 <_Z15desenha_circulolllm+0xec>
 800260a:	2201      	movs	r2, #1
 800260c:	4619      	mov	r1, r3
 800260e:	4658      	mov	r0, fp
 8002610:	f7ff ff0a 	bl	8002428 <_Z13desenha_pixelmmm>
 8002614:	e016      	b.n	8002644 <_Z15desenha_circulolllm+0xec>
 8002616:	f1bb 0f00 	cmp.w	fp, #0
 800261a:	daf4      	bge.n	8002606 <_Z15desenha_circulolllm+0xae>
 800261c:	e012      	b.n	8002644 <_Z15desenha_circulolllm+0xec>
		  if(((x0+y) <84) && ((y0+x) < 48))		desenha_pixel(x0 + y, y0 + x,1);
		  if(((x0-y) >=0) && ((y0+x) < 48))		desenha_pixel(x0 - y, y0 + x,1);
		  if(((x0+y) <84) && ((y0-x) >=0))		desenha_pixel(x0 + y, y0 - x,1);
		  if(((x0-y) >=0) && ((y0-x) >=0))		desenha_pixel(x0 - y, y0 - x,1);
 800261e:	f1bb 0f00 	cmp.w	fp, #0
 8002622:	da28      	bge.n	8002676 <_Z15desenha_circulolllm+0x11e>
 8002624:	e7c4      	b.n	80025b0 <_Z15desenha_circulolllm+0x58>
		  if(((x0+x) <84) && ((y0-y) >=0))		desenha_pixel(x0 + x, y0 - y,1);
 8002626:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
 800262a:	dc0b      	bgt.n	8002644 <_Z15desenha_circulolllm+0xec>
 800262c:	1b2b      	subs	r3, r5, r4
 800262e:	d4f2      	bmi.n	8002616 <_Z15desenha_circulolllm+0xbe>
 8002630:	4619      	mov	r1, r3
 8002632:	2201      	movs	r2, #1
 8002634:	4648      	mov	r0, r9
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	f7ff fef6 	bl	8002428 <_Z13desenha_pixelmmm>
		  if(((x0-x) >=0) && ((y0-y) >=0))		desenha_pixel(x0 - x, y0 - y,1);
 800263c:	f1bb 0f00 	cmp.w	fp, #0
 8002640:	9b01      	ldr	r3, [sp, #4]
 8002642:	dae2      	bge.n	800260a <_Z15desenha_circulolllm+0xb2>
		  if(((x0+y) <84) && ((y0+x) < 48))		desenha_pixel(x0 + y, y0 + x,1);
 8002644:	eb07 0904 	add.w	r9, r7, r4
 8002648:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
 800264c:	dc06      	bgt.n	800265c <_Z15desenha_circulolllm+0x104>
 800264e:	19a9      	adds	r1, r5, r6
 8002650:	292f      	cmp	r1, #47	; 0x2f
 8002652:	dc03      	bgt.n	800265c <_Z15desenha_circulolllm+0x104>
 8002654:	2201      	movs	r2, #1
 8002656:	4648      	mov	r0, r9
 8002658:	f7ff fee6 	bl	8002428 <_Z13desenha_pixelmmm>
		  if(((x0-y) >=0) && ((y0+x) < 48))		desenha_pixel(x0 - y, y0 + x,1);
 800265c:	ebb7 0b04 	subs.w	fp, r7, r4
 8002660:	d412      	bmi.n	8002688 <_Z15desenha_circulolllm+0x130>
 8002662:	19a9      	adds	r1, r5, r6
 8002664:	292f      	cmp	r1, #47	; 0x2f
 8002666:	dc03      	bgt.n	8002670 <_Z15desenha_circulolllm+0x118>
 8002668:	2201      	movs	r2, #1
 800266a:	4658      	mov	r0, fp
 800266c:	f7ff fedc 	bl	8002428 <_Z13desenha_pixelmmm>
		  if(((x0+y) <84) && ((y0-x) >=0))		desenha_pixel(x0 + y, y0 - x,1);
 8002670:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
 8002674:	dd0b      	ble.n	800268e <_Z15desenha_circulolllm+0x136>
		  if(((x0-y) >=0) && ((y0-x) >=0))		desenha_pixel(x0 - y, y0 - x,1);
 8002676:	1bab      	subs	r3, r5, r6
 8002678:	2b00      	cmp	r3, #0
 800267a:	db99      	blt.n	80025b0 <_Z15desenha_circulolllm+0x58>
 800267c:	2201      	movs	r2, #1
 800267e:	1ba9      	subs	r1, r5, r6
 8002680:	4658      	mov	r0, fp
 8002682:	f7ff fed1 	bl	8002428 <_Z13desenha_pixelmmm>
 8002686:	e793      	b.n	80025b0 <_Z15desenha_circulolllm+0x58>
		  if(((x0+y) <84) && ((y0-x) >=0))		desenha_pixel(x0 + y, y0 - x,1);
 8002688:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
 800268c:	dc90      	bgt.n	80025b0 <_Z15desenha_circulolllm+0x58>
 800268e:	1ba9      	subs	r1, r5, r6
 8002690:	d4c5      	bmi.n	800261e <_Z15desenha_circulolllm+0xc6>
 8002692:	2201      	movs	r2, #1
 8002694:	4648      	mov	r0, r9
 8002696:	f7ff fec7 	bl	8002428 <_Z13desenha_pixelmmm>
		  if(((x0-y) >=0) && ((y0-x) >=0))		desenha_pixel(x0 - y, y0 - x,1);
 800269a:	f1bb 0f00 	cmp.w	fp, #0
 800269e:	e7ec      	b.n	800267a <_Z15desenha_circulolllm+0x122>
	  }
}
 80026a0:	b003      	add	sp, #12
 80026a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080026a6 <_Z17desenha_retanguloP8pontos_tm>:
*/
void desenha_retangulo(struct  pontos_t *p,	uint32_t prop)	/*  p.x1=x1, p.y1=y1, p.x2=x2, p.y2=y2, passagem dos pontos por struct	*/
															/*  ponto superior esquerdo e ponto inferior direito					*/
															/* 0 =  apaga pixel, 1 = liga pixel, 									*/
															/* 2 = preenchimento pixel apagado, 3 = preenchimento pixel ligado		*/
{	struct pontos_t pr;
 80026a6:	b570      	push	{r4, r5, r6, lr}
	uint32_t pxl, i;

	if(prop < 2)								// desenho com quatro linhas
 80026a8:	2901      	cmp	r1, #1
{	struct pontos_t pr;
 80026aa:	b086      	sub	sp, #24
 80026ac:	4604      	mov	r4, r0
 80026ae:	460e      	mov	r6, r1
 80026b0:	6842      	ldr	r2, [r0, #4]
 80026b2:	68c3      	ldr	r3, [r0, #12]
 80026b4:	6805      	ldr	r5, [r0, #0]
	if(prop < 2)								// desenho com quatro linhas
 80026b6:	d820      	bhi.n	80026fa <_Z17desenha_retanguloP8pontos_tm+0x54>
	{
		pr.x1 = p->x1; pr.y1 = p->y1;
		pr.x2 = p->x1; pr.y2 = p->y2;
		desenha_linha(&pr,prop);
 80026b8:	4668      	mov	r0, sp
		pr.x1 = p->x1; pr.y1 = p->y1;
 80026ba:	e9cd 5200 	strd	r5, r2, [sp]
		pr.x2 = p->x1; pr.y2 = p->y2;
 80026be:	e9cd 5302 	strd	r5, r3, [sp, #8]
		desenha_linha(&pr,prop);
 80026c2:	f7ff fecd 	bl	8002460 <_Z13desenha_linhaP8pontos_tm>

		pr.x2 = p->x2; pr.y2 = p->y1;
 80026c6:	68a3      	ldr	r3, [r4, #8]
		desenha_linha(&pr,prop);
 80026c8:	4631      	mov	r1, r6
		pr.x2 = p->x2; pr.y2 = p->y1;
 80026ca:	9302      	str	r3, [sp, #8]
 80026cc:	6863      	ldr	r3, [r4, #4]
		desenha_linha(&pr,prop);
 80026ce:	4668      	mov	r0, sp
		pr.x2 = p->x2; pr.y2 = p->y1;
 80026d0:	9303      	str	r3, [sp, #12]
		desenha_linha(&pr,prop);
 80026d2:	f7ff fec5 	bl	8002460 <_Z13desenha_linhaP8pontos_tm>

		pr.x1 = p->x2; pr.y1 = p->y2;
 80026d6:	68a3      	ldr	r3, [r4, #8]
		desenha_linha(&pr,prop);
 80026d8:	4631      	mov	r1, r6
		pr.x1 = p->x2; pr.y1 = p->y2;
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	68e3      	ldr	r3, [r4, #12]
		desenha_linha(&pr,prop);
 80026de:	4668      	mov	r0, sp
		pr.x1 = p->x2; pr.y1 = p->y2;
 80026e0:	9301      	str	r3, [sp, #4]
		desenha_linha(&pr,prop);
 80026e2:	f7ff febd 	bl	8002460 <_Z13desenha_linhaP8pontos_tm>

		pr.x2 = p->x1; pr.y2 = p->y2;
 80026e6:	6823      	ldr	r3, [r4, #0]
		desenha_linha(&pr,prop);
 80026e8:	4631      	mov	r1, r6
		pr.x2 = p->x1; pr.y2 = p->y2;
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	68e3      	ldr	r3, [r4, #12]
		desenha_linha(&pr,prop);
 80026ee:	4668      	mov	r0, sp
		pr.x2 = p->x1; pr.y2 = p->y2;
 80026f0:	9303      	str	r3, [sp, #12]
		desenha_linha(&pr,prop);
 80026f2:	f7ff feb5 	bl	8002460 <_Z13desenha_linhaP8pontos_tm>
			pr.x1 = i;
			pr.x2 = i;
			desenha_linha(&pr,pxl);
		}
	}
}
 80026f6:	b006      	add	sp, #24
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
		if(prop == 2)							// propriedade para ligar ou apagar os pixeis
 80026fa:	1e8e      	subs	r6, r1, #2
 80026fc:	bf18      	it	ne
 80026fe:	2601      	movne	r6, #1
		pr.y1 = p->y1;
 8002700:	9201      	str	r2, [sp, #4]
		pr.y2 = p->y2;
 8002702:	9303      	str	r3, [sp, #12]
		for(i = p->x1; i <= p->x2; i++)			// desenha as linhas verticalmente
 8002704:	68a3      	ldr	r3, [r4, #8]
 8002706:	42ab      	cmp	r3, r5
 8002708:	d3f5      	bcc.n	80026f6 <_Z17desenha_retanguloP8pontos_tm+0x50>
			desenha_linha(&pr,pxl);
 800270a:	4631      	mov	r1, r6
 800270c:	4668      	mov	r0, sp
			pr.x1 = i;
 800270e:	9500      	str	r5, [sp, #0]
			pr.x2 = i;
 8002710:	9502      	str	r5, [sp, #8]
			desenha_linha(&pr,pxl);
 8002712:	f7ff fea5 	bl	8002460 <_Z13desenha_linhaP8pontos_tm>
		for(i = p->x1; i <= p->x2; i++)			// desenha as linhas verticalmente
 8002716:	3501      	adds	r5, #1
 8002718:	e7f4      	b.n	8002704 <_Z17desenha_retanguloP8pontos_tm+0x5e>

0800271a <_Z17desenha_trianguloP8pontos_tm>:
*		p1--------p3
*/
void desenha_triangulo(struct  pontos_t *p,		/*  p.x1=x1, p.y1=y1, p.x2=x2, p.y2=y2, , p.x3=x3, p.y3=y3				*/
												/*  ponto superior esquerdo e ponto inferior direito					*/
								uint32_t prop)	/* 0 =  apaga pixel, 1 = liga pixel,									*/
{	struct pontos_t pt;
 800271a:	b530      	push	{r4, r5, lr}
 800271c:	4604      	mov	r4, r0
 800271e:	460d      	mov	r5, r1

	pt.x1 = p->x1; pt.y1 = p->y1;
 8002720:	6803      	ldr	r3, [r0, #0]
{	struct pontos_t pt;
 8002722:	b087      	sub	sp, #28
	pt.x1 = p->x1; pt.y1 = p->y1;
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	6843      	ldr	r3, [r0, #4]
 8002728:	9301      	str	r3, [sp, #4]
	pt.x2 = p->x2; pt.y2 = p->y2;
 800272a:	6883      	ldr	r3, [r0, #8]
 800272c:	9302      	str	r3, [sp, #8]
 800272e:	68c3      	ldr	r3, [r0, #12]
	desenha_linha(&pt,prop);
 8002730:	4668      	mov	r0, sp
	pt.x2 = p->x2; pt.y2 = p->y2;
 8002732:	9303      	str	r3, [sp, #12]
	desenha_linha(&pt,prop);
 8002734:	f7ff fe94 	bl	8002460 <_Z13desenha_linhaP8pontos_tm>

	pt.x2 = p->x3; pt.y2 = p->y3;
 8002738:	6923      	ldr	r3, [r4, #16]
	desenha_linha(&pt,prop);
 800273a:	4629      	mov	r1, r5
	pt.x2 = p->x3; pt.y2 = p->y3;
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	6963      	ldr	r3, [r4, #20]
	desenha_linha(&pt,prop);
 8002740:	4668      	mov	r0, sp
	pt.x2 = p->x3; pt.y2 = p->y3;
 8002742:	9303      	str	r3, [sp, #12]
	desenha_linha(&pt,prop);
 8002744:	f7ff fe8c 	bl	8002460 <_Z13desenha_linhaP8pontos_tm>

	pt.x1 = p->x2; pt.y1 = p->y2;
 8002748:	68a3      	ldr	r3, [r4, #8]
	desenha_linha(&pt,prop);
 800274a:	4629      	mov	r1, r5
	pt.x1 = p->x2; pt.y1 = p->y2;
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	68e3      	ldr	r3, [r4, #12]
	desenha_linha(&pt,prop);
 8002750:	4668      	mov	r0, sp
	pt.x1 = p->x2; pt.y1 = p->y2;
 8002752:	9301      	str	r3, [sp, #4]
	desenha_linha(&pt,prop);
 8002754:	f7ff fe84 	bl	8002460 <_Z13desenha_linhaP8pontos_tm>

}
 8002758:	b007      	add	sp, #28
 800275a:	bd30      	pop	{r4, r5, pc}

0800275c <_Z10print_foodmm>:


void print_food (uint32_t x0, uint32_t y0)	// min x0 =  3; min y0 =  3
											// max x0 = 80; max y0 = 44
{
	desenha_circulo(x0,y0,2,1);
 800275c:	2301      	movs	r3, #1
 800275e:	2202      	movs	r2, #2
 8002760:	f7ff befa 	b.w	8002558 <_Z15desenha_circulolllm>

08002764 <_Z8print_AImm>:

// @param x e y => coordenadas do primeiro ponto (superior esquerdo)
void print_AI (uint32_t x, uint32_t y)
										// min x = 1; min y = 1
										// max x = 78; max y = 42
{
 8002764:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct pontos_t ai;
		ai.x1 = x;
		ai.y1 = y;
 8002766:	e9cd 0100 	strd	r0, r1, [sp]
		ai.x2 = ai.x1 + 4;
 800276a:	3004      	adds	r0, #4
		ai.y2 = ai.y1 + 4;
 800276c:	3104      	adds	r1, #4
		ai.x2 = ai.x1 + 4;
 800276e:	9002      	str	r0, [sp, #8]
		ai.y2 = ai.y1 + 4;
 8002770:	9103      	str	r1, [sp, #12]
	desenha_retangulo(&ai,3);
 8002772:	4668      	mov	r0, sp
 8002774:	2103      	movs	r1, #3
 8002776:	f7ff ff96 	bl	80026a6 <_Z17desenha_retanguloP8pontos_tm>
}
 800277a:	b007      	add	sp, #28
 800277c:	f85d fb04 	ldr.w	pc, [sp], #4

08002780 <_Z13print_monstermm>:

void print_monster(uint32_t x, uint32_t y)
{
 8002780:	b500      	push	{lr}
 8002782:	b08d      	sub	sp, #52	; 0x34
	struct pontos_t monsterUP;
	struct pontos_t monsterDOWN;
		monsterUP.x1 = x;
		monsterUP.y1 = y;
 8002784:	e9cd 0100 	strd	r0, r1, [sp]
		monsterUP.x2 = monsterUP.x1 + 2;
 8002788:	1c83      	adds	r3, r0, #2
		monsterUP.y2 = monsterUP.y1 - 4;
		monsterUP.x3 = monsterUP.x1 + 4;
 800278a:	3004      	adds	r0, #4
		monsterUP.y3 = monsterUP.y1;
 800278c:	e9cd 0104 	strd	r0, r1, [sp, #16]
		monsterUP.x2 = monsterUP.x1 + 2;
 8002790:	9302      	str	r3, [sp, #8]
		desenha_triangulo(&monsterUP,1);
 8002792:	4668      	mov	r0, sp
		monsterUP.y2 = monsterUP.y1 - 4;
 8002794:	1f0b      	subs	r3, r1, #4
		desenha_triangulo(&monsterUP,1);
 8002796:	2101      	movs	r1, #1
		monsterUP.y2 = monsterUP.y1 - 4;
 8002798:	9303      	str	r3, [sp, #12]
		desenha_triangulo(&monsterUP,1);
 800279a:	f7ff ffbe 	bl	800271a <_Z17desenha_trianguloP8pontos_tm>

		monsterDOWN.x1 = monsterUP.x1;
		monsterDOWN.y1 = monsterUP.y2 - 1;
		monsterDOWN.x2 = monsterUP.x2;
 800279e:	9902      	ldr	r1, [sp, #8]
		monsterDOWN.x1 = monsterUP.x1;
 80027a0:	9a00      	ldr	r2, [sp, #0]
		monsterDOWN.x2 = monsterUP.x2;
 80027a2:	9108      	str	r1, [sp, #32]
		monsterDOWN.y2 = monsterUP.y1 + 1;
 80027a4:	9901      	ldr	r1, [sp, #4]
		monsterDOWN.y1 = monsterUP.y2 - 1;
 80027a6:	9b03      	ldr	r3, [sp, #12]
		monsterDOWN.y2 = monsterUP.y1 + 1;
 80027a8:	3101      	adds	r1, #1
		monsterDOWN.y1 = monsterUP.y2 - 1;
 80027aa:	3b01      	subs	r3, #1
		monsterDOWN.x1 = monsterUP.x1;
 80027ac:	9206      	str	r2, [sp, #24]
		monsterDOWN.y2 = monsterUP.y1 + 1;
 80027ae:	9109      	str	r1, [sp, #36]	; 0x24
		monsterDOWN.x3 = monsterDOWN.x1 + 4;
 80027b0:	3204      	adds	r2, #4
		monsterDOWN.y3 = monsterDOWN.y1;
		desenha_triangulo(&monsterDOWN,1);
 80027b2:	2101      	movs	r1, #1
 80027b4:	a806      	add	r0, sp, #24
		monsterDOWN.y1 = monsterUP.y2 - 1;
 80027b6:	9307      	str	r3, [sp, #28]
		monsterDOWN.y3 = monsterDOWN.y1;
 80027b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		desenha_triangulo(&monsterDOWN,1);
 80027bc:	f7ff ffad 	bl	800271a <_Z17desenha_trianguloP8pontos_tm>

}
 80027c0:	b00d      	add	sp, #52	; 0x34
 80027c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080027c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027c8:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_MspInit+0x84>)
{
 80027ca:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80027cc:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ce:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	619a      	str	r2, [r3, #24]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e0:	f7fd ffec 	bl	80007bc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	f06f 000b 	mvn.w	r0, #11
 80027ea:	4611      	mov	r1, r2
 80027ec:	f7fd fff8 	bl	80007e0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80027f0:	2200      	movs	r2, #0
 80027f2:	f06f 000a 	mvn.w	r0, #10
 80027f6:	4611      	mov	r1, r2
 80027f8:	f7fd fff2 	bl	80007e0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	f06f 0009 	mvn.w	r0, #9
 8002802:	4611      	mov	r1, r2
 8002804:	f7fd ffec 	bl	80007e0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002808:	2200      	movs	r2, #0
 800280a:	f06f 0004 	mvn.w	r0, #4
 800280e:	4611      	mov	r1, r2
 8002810:	f7fd ffe6 	bl	80007e0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002814:	2200      	movs	r2, #0
 8002816:	f06f 0003 	mvn.w	r0, #3
 800281a:	4611      	mov	r1, r2
 800281c:	f7fd ffe0 	bl	80007e0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002820:	2200      	movs	r2, #0
 8002822:	210f      	movs	r1, #15
 8002824:	f06f 0001 	mvn.w	r0, #1
 8002828:	f7fd ffda 	bl	80007e0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	210f      	movs	r1, #15
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	f7fd ffd4 	bl	80007e0 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002838:	4a05      	ldr	r2, [pc, #20]	; (8002850 <HAL_MspInit+0x88>)
 800283a:	6853      	ldr	r3, [r2, #4]
 800283c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002840:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002846:	b003      	add	sp, #12
 8002848:	f85d fb04 	ldr.w	pc, [sp], #4
 800284c:	40021000 	.word	0x40021000
 8002850:	40010000 	.word	0x40010000

08002854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002854:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002856:	6802      	ldr	r2, [r0, #0]
 8002858:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <HAL_ADC_MspInit+0x80>)
{
 800285a:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 800285c:	429a      	cmp	r2, r3
{
 800285e:	4605      	mov	r5, r0
  if(hadc->Instance==ADC1)
 8002860:	d135      	bne.n	80028ce <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002862:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002866:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800286a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286e:	619a      	str	r2, [r3, #24]
 8002870:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002872:	2206      	movs	r2, #6
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800287c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	4816      	ldr	r0, [pc, #88]	; (80028d8 <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002880:	e9cd 2302 	strd	r2, r3, [sp, #8]
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002884:	2680      	movs	r6, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002886:	f7fe f913 	bl	8000ab0 <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800288a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Instance = DMA1_Channel1;
 800288e:	4c13      	ldr	r4, [pc, #76]	; (80028dc <HAL_ADC_MspInit+0x88>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002890:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002894:	e9c4 6203 	strd	r6, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002898:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800289a:	2300      	movs	r3, #0
 800289c:	4910      	ldr	r1, [pc, #64]	; (80028e0 <HAL_ADC_MspInit+0x8c>)
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800289e:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028a2:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a4:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a8:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028aa:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028ac:	f7fd fffa 	bl	80008a4 <HAL_DMA_Init>
 80028b0:	b118      	cbz	r0, 80028ba <HAL_ADC_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 80028b2:	4631      	mov	r1, r6
 80028b4:	480b      	ldr	r0, [pc, #44]	; (80028e4 <HAL_ADC_MspInit+0x90>)
 80028b6:	f7ff fccb 	bl	8002250 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028ba:	622c      	str	r4, [r5, #32]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80028bc:	2012      	movs	r0, #18
 80028be:	2200      	movs	r2, #0
 80028c0:	2105      	movs	r1, #5
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028c2:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80028c4:	f7fd ff8c 	bl	80007e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028c8:	2012      	movs	r0, #18
 80028ca:	f7fd ffbd 	bl	8000848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028ce:	b006      	add	sp, #24
 80028d0:	bd70      	pop	{r4, r5, r6, pc}
 80028d2:	bf00      	nop
 80028d4:	40012400 	.word	0x40012400
 80028d8:	40010800 	.word	0x40010800
 80028dc:	20000dac 	.word	0x20000dac
 80028e0:	40020008 	.word	0x40020008
 80028e4:	08002e95 	.word	0x08002e95

080028e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e8:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80028ea:	4601      	mov	r1, r0
{
 80028ec:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80028ee:	2200      	movs	r2, #0
 80028f0:	201e      	movs	r0, #30
 80028f2:	f7fd ff75 	bl	80007e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80028f6:	201e      	movs	r0, #30
 80028f8:	f7fd ffa6 	bl	8000848 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028fe:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002900:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002902:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002904:	f042 0204 	orr.w	r2, r2, #4
 8002908:	61da      	str	r2, [r3, #28]
 800290a:	69db      	ldr	r3, [r3, #28]
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800290c:	4c11      	ldr	r4, [pc, #68]	; (8002954 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	9302      	str	r3, [sp, #8]
 8002914:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002916:	f7fe fc2f 	bl	8001178 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800291a:	f7fe fc1d 	bl	8001158 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002920:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 8002922:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8002924:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002928:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800292a:	4b0c      	ldr	r3, [pc, #48]	; (800295c <HAL_InitTick+0x74>)
 800292c:	fbb0 f0f3 	udiv	r0, r0, r3
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8002930:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002932:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8002934:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002936:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8002938:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800293c:	f7fe fd9c 	bl	8001478 <HAL_TIM_Base_Init>
 8002940:	b920      	cbnz	r0, 800294c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002942:	4620      	mov	r0, r4
 8002944:	f7fe fcaf 	bl	80012a6 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002948:	b008      	add	sp, #32
 800294a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800294c:	2001      	movs	r0, #1
 800294e:	e7fb      	b.n	8002948 <HAL_InitTick+0x60>
 8002950:	40021000 	.word	0x40021000
 8002954:	20000ffc 	.word	0x20000ffc
 8002958:	40000800 	.word	0x40000800
 800295c:	000f4240 	.word	0x000f4240

08002960 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002960:	4770      	bx	lr

08002962 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002962:	e7fe      	b.n	8002962 <HardFault_Handler>

08002964 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002964:	e7fe      	b.n	8002964 <MemManage_Handler>

08002966 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler>

08002968 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002968:	e7fe      	b.n	8002968 <UsageFault_Handler>

0800296a <DebugMon_Handler>:
 800296a:	4770      	bx	lr

0800296c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800296c:	f7fe bda0 	b.w	80014b0 <osSystickHandler>

08002970 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002970:	4801      	ldr	r0, [pc, #4]	; (8002978 <DMA1_Channel1_IRQHandler+0x8>)
 8002972:	f7fe b809 	b.w	8000988 <HAL_DMA_IRQHandler>
 8002976:	bf00      	nop
 8002978:	20000dac 	.word	0x20000dac

0800297c <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800297c:	4801      	ldr	r0, [pc, #4]	; (8002984 <ADC1_2_IRQHandler+0x8>)
 800297e:	f7fd bc4b 	b.w	8000218 <HAL_ADC_IRQHandler>
 8002982:	bf00      	nop
 8002984:	20000d7c 	.word	0x20000d7c

08002988 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002988:	4801      	ldr	r0, [pc, #4]	; (8002990 <TIM4_IRQHandler+0x8>)
 800298a:	f7fe bc9b 	b.w	80012c4 <HAL_TIM_IRQHandler>
 800298e:	bf00      	nop
 8002990:	20000ffc 	.word	0x20000ffc

08002994 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <SystemInit+0x40>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <SystemInit+0x44>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80029ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029b0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029b8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80029c0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80029c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80029c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80029c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <SystemInit+0x48>)
 80029ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	f8ff0000 	.word	0xf8ff0000
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029e2:	e003      	b.n	80029ec <LoopCopyDataInit>

080029e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80029e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029ea:	3104      	adds	r1, #4

080029ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029ec:	480a      	ldr	r0, [pc, #40]	; (8002a18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029f4:	d3f6      	bcc.n	80029e4 <CopyDataInit>
  ldr r2, =_sbss
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029f8:	e002      	b.n	8002a00 <LoopFillZerobss>

080029fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029fc:	f842 3b04 	str.w	r3, [r2], #4

08002a00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a04:	d3f9      	bcc.n	80029fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a06:	f7ff ffc5 	bl	8002994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a0a:	f000 f80f 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a0e:	f7ff fb43 	bl	8002098 <main>
  bx lr
 8002a12:	4770      	bx	lr
  ldr r3, =_sidata
 8002a14:	08002ed0 	.word	0x08002ed0
  ldr r0, =_sdata
 8002a18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002a20:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002a24:	2000103c 	.word	0x2000103c

08002a28 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a28:	e7fe      	b.n	8002a28 <CAN1_RX1_IRQHandler>
	...

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	2500      	movs	r5, #0
 8002a30:	4e0c      	ldr	r6, [pc, #48]	; (8002a64 <__libc_init_array+0x38>)
 8002a32:	4c0d      	ldr	r4, [pc, #52]	; (8002a68 <__libc_init_array+0x3c>)
 8002a34:	1ba4      	subs	r4, r4, r6
 8002a36:	10a4      	asrs	r4, r4, #2
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	f000 f81a 	bl	8002a74 <_init>
 8002a40:	2500      	movs	r5, #0
 8002a42:	4e0a      	ldr	r6, [pc, #40]	; (8002a6c <__libc_init_array+0x40>)
 8002a44:	4c0a      	ldr	r4, [pc, #40]	; (8002a70 <__libc_init_array+0x44>)
 8002a46:	1ba4      	subs	r4, r4, r6
 8002a48:	10a4      	asrs	r4, r4, #2
 8002a4a:	42a5      	cmp	r5, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a54:	4798      	blx	r3
 8002a56:	3501      	adds	r5, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a5e:	4798      	blx	r3
 8002a60:	3501      	adds	r5, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	08002ec8 	.word	0x08002ec8
 8002a68:	08002ec8 	.word	0x08002ec8
 8002a6c:	08002ec8 	.word	0x08002ec8
 8002a70:	08002ecc 	.word	0x08002ecc

08002a74 <_init>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	bf00      	nop
 8002a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7a:	bc08      	pop	{r3}
 8002a7c:	469e      	mov	lr, r3
 8002a7e:	4770      	bx	lr

08002a80 <_fini>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr
